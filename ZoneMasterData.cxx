// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ZoneMasterData.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ZoneMasterData.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




cansignal::cansignal()
{
}

cansignal::~cansignal()
{
}

cansignal::cansignal(
        const cansignal& x)
{
    m_name = x.m_name;
    m_raw_value = x.m_raw_value;
    m_phy_value = x.m_phy_value;
}

cansignal::cansignal(
        cansignal&& x) noexcept
{
    m_name = std::move(x.m_name);
    m_raw_value = x.m_raw_value;
    m_phy_value = std::move(x.m_phy_value);
}

cansignal& cansignal::operator =(
        const cansignal& x)
{

    m_name = x.m_name;
    m_raw_value = x.m_raw_value;
    m_phy_value = x.m_phy_value;
    return *this;
}

cansignal& cansignal::operator =(
        cansignal&& x) noexcept
{

    m_name = std::move(x.m_name);
    m_raw_value = x.m_raw_value;
    m_phy_value = std::move(x.m_phy_value);
    return *this;
}

bool cansignal::operator ==(
        const cansignal& x) const
{
    return (m_name == x.m_name &&
           m_raw_value == x.m_raw_value &&
           m_phy_value == x.m_phy_value);
}

bool cansignal::operator !=(
        const cansignal& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void cansignal::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void cansignal::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& cansignal::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& cansignal::name()
{
    return m_name;
}


/*!
 * @brief This function sets a value in member raw_value
 * @param _raw_value New value for member raw_value
 */
void cansignal::raw_value(
        uint64_t _raw_value)
{
    m_raw_value = _raw_value;
}

/*!
 * @brief This function returns the value of member raw_value
 * @return Value of member raw_value
 */
uint64_t cansignal::raw_value() const
{
    return m_raw_value;
}

/*!
 * @brief This function returns a reference to member raw_value
 * @return Reference to member raw_value
 */
uint64_t& cansignal::raw_value()
{
    return m_raw_value;
}


/*!
 * @brief This function copies the value in member phy_value
 * @param _phy_value New value to be copied in member phy_value
 */
void cansignal::phy_value(
        const std::string& _phy_value)
{
    m_phy_value = _phy_value;
}

/*!
 * @brief This function moves the value in member phy_value
 * @param _phy_value New value to be moved in member phy_value
 */
void cansignal::phy_value(
        std::string&& _phy_value)
{
    m_phy_value = std::move(_phy_value);
}

/*!
 * @brief This function returns a constant reference to member phy_value
 * @return Constant reference to member phy_value
 */
const std::string& cansignal::phy_value() const
{
    return m_phy_value;
}

/*!
 * @brief This function returns a reference to member phy_value
 * @return Reference to member phy_value
 */
std::string& cansignal::phy_value()
{
    return m_phy_value;
}






canpdu::canpdu()
{
}

canpdu::~canpdu()
{
}

canpdu::canpdu(
        const canpdu& x)
{
    m_name = x.m_name;
    m_id = x.m_id;
    m_data = x.m_data;
    m_signals = x.m_signals;
}

canpdu::canpdu(
        canpdu&& x) noexcept
{
    m_name = std::move(x.m_name);
    m_id = x.m_id;
    m_data = std::move(x.m_data);
    m_signals = std::move(x.m_signals);
}

canpdu& canpdu::operator =(
        const canpdu& x)
{

    m_name = x.m_name;
    m_id = x.m_id;
    m_data = x.m_data;
    m_signals = x.m_signals;
    return *this;
}

canpdu& canpdu::operator =(
        canpdu&& x) noexcept
{

    m_name = std::move(x.m_name);
    m_id = x.m_id;
    m_data = std::move(x.m_data);
    m_signals = std::move(x.m_signals);
    return *this;
}

bool canpdu::operator ==(
        const canpdu& x) const
{
    return (m_name == x.m_name &&
           m_id == x.m_id &&
           m_data == x.m_data &&
           m_signals == x.m_signals);
}

bool canpdu::operator !=(
        const canpdu& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void canpdu::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void canpdu::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& canpdu::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& canpdu::name()
{
    return m_name;
}


/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void canpdu::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t canpdu::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& canpdu::id()
{
    return m_id;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void canpdu::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void canpdu::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& canpdu::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& canpdu::data()
{
    return m_data;
}


/*!
 * @brief This function copies the value in member signals
 * @param _signals New value to be copied in member signals
 */
void canpdu::signals(
        const std::vector<cansignal>& _signals)
{
    m_signals = _signals;
}

/*!
 * @brief This function moves the value in member signals
 * @param _signals New value to be moved in member signals
 */
void canpdu::signals(
        std::vector<cansignal>&& _signals)
{
    m_signals = std::move(_signals);
}

/*!
 * @brief This function returns a constant reference to member signals
 * @return Constant reference to member signals
 */
const std::vector<cansignal>& canpdu::signals() const
{
    return m_signals;
}

/*!
 * @brief This function returns a reference to member signals
 * @return Reference to member signals
 */
std::vector<cansignal>& canpdu::signals()
{
    return m_signals;
}




canframe::canframe()
{
}

canframe::~canframe()
{
}

canframe::canframe(
        const canframe& x)
{
    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_dataLen = x.m_dataLen;
    m_data = x.m_data;
    m_cycTime = x.m_cycTime;
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_isFd = x.m_isFd;
    m_isRt = x.m_isRt;
    m_isExt = x.m_isExt;
    m_errorCode = x.m_errorCode;
    m_containerPduFlag = x.m_containerPduFlag;
    m_pduFlag = x.m_pduFlag;
    m_containPduNames = x.m_containPduNames;
    m_containPduNum = x.m_containPduNum;
    m_containPdus = x.m_containPdus;
    m_pdus = x.m_pdus;
    m_name = x.m_name;
}

canframe::canframe(
        canframe&& x) noexcept
{
    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_dataLen = x.m_dataLen;
    m_data = std::move(x.m_data);
    m_cycTime = x.m_cycTime;
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_isFd = x.m_isFd;
    m_isRt = x.m_isRt;
    m_isExt = x.m_isExt;
    m_errorCode = x.m_errorCode;
    m_containerPduFlag = x.m_containerPduFlag;
    m_pduFlag = x.m_pduFlag;
    m_containPduNames = std::move(x.m_containPduNames);
    m_containPduNum = std::move(x.m_containPduNum);
    m_containPdus = std::move(x.m_containPdus);
    m_pdus = std::move(x.m_pdus);
    m_name = std::move(x.m_name);
}

canframe& canframe::operator =(
        const canframe& x)
{

    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_dataLen = x.m_dataLen;
    m_data = x.m_data;
    m_cycTime = x.m_cycTime;
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_isFd = x.m_isFd;
    m_isRt = x.m_isRt;
    m_isExt = x.m_isExt;
    m_errorCode = x.m_errorCode;
    m_containerPduFlag = x.m_containerPduFlag;
    m_pduFlag = x.m_pduFlag;
    m_containPduNames = x.m_containPduNames;
    m_containPduNum = x.m_containPduNum;
    m_containPdus = x.m_containPdus;
    m_pdus = x.m_pdus;
    m_name = x.m_name;
    return *this;
}

canframe& canframe::operator =(
        canframe&& x) noexcept
{

    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_dataLen = x.m_dataLen;
    m_data = std::move(x.m_data);
    m_cycTime = x.m_cycTime;
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_isFd = x.m_isFd;
    m_isRt = x.m_isRt;
    m_isExt = x.m_isExt;
    m_errorCode = x.m_errorCode;
    m_containerPduFlag = x.m_containerPduFlag;
    m_pduFlag = x.m_pduFlag;
    m_containPduNames = std::move(x.m_containPduNames);
    m_containPduNum = std::move(x.m_containPduNum);
    m_containPdus = std::move(x.m_containPdus);
    m_pdus = std::move(x.m_pdus);
    m_name = std::move(x.m_name);
    return *this;
}

bool canframe::operator ==(
        const canframe& x) const
{
    return (m_channel == x.m_channel &&
           m_id == x.m_id &&
           m_dlc == x.m_dlc &&
           m_dataLen == x.m_dataLen &&
           m_data == x.m_data &&
           m_cycTime == x.m_cycTime &&
           m_flags == x.m_flags &&
           m_timeStamp == x.m_timeStamp &&
           m_timeStamp_d == x.m_timeStamp_d &&
           m_rxtx == x.m_rxtx &&
           m_isFd == x.m_isFd &&
           m_isRt == x.m_isRt &&
           m_isExt == x.m_isExt &&
           m_errorCode == x.m_errorCode &&
           m_containerPduFlag == x.m_containerPduFlag &&
           m_pduFlag == x.m_pduFlag &&
           m_containPduNames == x.m_containPduNames &&
           m_containPduNum == x.m_containPduNum &&
           m_containPdus == x.m_containPdus &&
           m_pdus == x.m_pdus &&
           m_name == x.m_name);
}

bool canframe::operator !=(
        const canframe& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member channel
 * @param _channel New value for member channel
 */
void canframe::channel(
        uint32_t _channel)
{
    m_channel = _channel;
}

/*!
 * @brief This function returns the value of member channel
 * @return Value of member channel
 */
uint32_t canframe::channel() const
{
    return m_channel;
}

/*!
 * @brief This function returns a reference to member channel
 * @return Reference to member channel
 */
uint32_t& canframe::channel()
{
    return m_channel;
}


/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void canframe::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t canframe::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& canframe::id()
{
    return m_id;
}


/*!
 * @brief This function sets a value in member dlc
 * @param _dlc New value for member dlc
 */
void canframe::dlc(
        uint8_t _dlc)
{
    m_dlc = _dlc;
}

/*!
 * @brief This function returns the value of member dlc
 * @return Value of member dlc
 */
uint8_t canframe::dlc() const
{
    return m_dlc;
}

/*!
 * @brief This function returns a reference to member dlc
 * @return Reference to member dlc
 */
uint8_t& canframe::dlc()
{
    return m_dlc;
}


/*!
 * @brief This function sets a value in member dataLen
 * @param _dataLen New value for member dataLen
 */
void canframe::dataLen(
        uint16_t _dataLen)
{
    m_dataLen = _dataLen;
}

/*!
 * @brief This function returns the value of member dataLen
 * @return Value of member dataLen
 */
uint16_t canframe::dataLen() const
{
    return m_dataLen;
}

/*!
 * @brief This function returns a reference to member dataLen
 * @return Reference to member dataLen
 */
uint16_t& canframe::dataLen()
{
    return m_dataLen;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void canframe::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void canframe::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& canframe::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& canframe::data()
{
    return m_data;
}


/*!
 * @brief This function sets a value in member cycTime
 * @param _cycTime New value for member cycTime
 */
void canframe::cycTime(
        uint64_t _cycTime)
{
    m_cycTime = _cycTime;
}

/*!
 * @brief This function returns the value of member cycTime
 * @return Value of member cycTime
 */
uint64_t canframe::cycTime() const
{
    return m_cycTime;
}

/*!
 * @brief This function returns a reference to member cycTime
 * @return Reference to member cycTime
 */
uint64_t& canframe::cycTime()
{
    return m_cycTime;
}


/*!
 * @brief This function sets a value in member flags
 * @param _flags New value for member flags
 */
void canframe::flags(
        uint16_t _flags)
{
    m_flags = _flags;
}

/*!
 * @brief This function returns the value of member flags
 * @return Value of member flags
 */
uint16_t canframe::flags() const
{
    return m_flags;
}

/*!
 * @brief This function returns a reference to member flags
 * @return Reference to member flags
 */
uint16_t& canframe::flags()
{
    return m_flags;
}


/*!
 * @brief This function sets a value in member timeStamp
 * @param _timeStamp New value for member timeStamp
 */
void canframe::timeStamp(
        uint64_t _timeStamp)
{
    m_timeStamp = _timeStamp;
}

/*!
 * @brief This function returns the value of member timeStamp
 * @return Value of member timeStamp
 */
uint64_t canframe::timeStamp() const
{
    return m_timeStamp;
}

/*!
 * @brief This function returns a reference to member timeStamp
 * @return Reference to member timeStamp
 */
uint64_t& canframe::timeStamp()
{
    return m_timeStamp;
}


/*!
 * @brief This function sets a value in member timeStamp_d
 * @param _timeStamp_d New value for member timeStamp_d
 */
void canframe::timeStamp_d(
        int64_t _timeStamp_d)
{
    m_timeStamp_d = _timeStamp_d;
}

/*!
 * @brief This function returns the value of member timeStamp_d
 * @return Value of member timeStamp_d
 */
int64_t canframe::timeStamp_d() const
{
    return m_timeStamp_d;
}

/*!
 * @brief This function returns a reference to member timeStamp_d
 * @return Reference to member timeStamp_d
 */
int64_t& canframe::timeStamp_d()
{
    return m_timeStamp_d;
}


/*!
 * @brief This function sets a value in member rxtx
 * @param _rxtx New value for member rxtx
 */
void canframe::rxtx(
        uint8_t _rxtx)
{
    m_rxtx = _rxtx;
}

/*!
 * @brief This function returns the value of member rxtx
 * @return Value of member rxtx
 */
uint8_t canframe::rxtx() const
{
    return m_rxtx;
}

/*!
 * @brief This function returns a reference to member rxtx
 * @return Reference to member rxtx
 */
uint8_t& canframe::rxtx()
{
    return m_rxtx;
}


/*!
 * @brief This function sets a value in member isFd
 * @param _isFd New value for member isFd
 */
void canframe::isFd(
        uint8_t _isFd)
{
    m_isFd = _isFd;
}

/*!
 * @brief This function returns the value of member isFd
 * @return Value of member isFd
 */
uint8_t canframe::isFd() const
{
    return m_isFd;
}

/*!
 * @brief This function returns a reference to member isFd
 * @return Reference to member isFd
 */
uint8_t& canframe::isFd()
{
    return m_isFd;
}


/*!
 * @brief This function sets a value in member isRt
 * @param _isRt New value for member isRt
 */
void canframe::isRt(
        uint8_t _isRt)
{
    m_isRt = _isRt;
}

/*!
 * @brief This function returns the value of member isRt
 * @return Value of member isRt
 */
uint8_t canframe::isRt() const
{
    return m_isRt;
}

/*!
 * @brief This function returns a reference to member isRt
 * @return Reference to member isRt
 */
uint8_t& canframe::isRt()
{
    return m_isRt;
}


/*!
 * @brief This function sets a value in member isExt
 * @param _isExt New value for member isExt
 */
void canframe::isExt(
        uint8_t _isExt)
{
    m_isExt = _isExt;
}

/*!
 * @brief This function returns the value of member isExt
 * @return Value of member isExt
 */
uint8_t canframe::isExt() const
{
    return m_isExt;
}

/*!
 * @brief This function returns a reference to member isExt
 * @return Reference to member isExt
 */
uint8_t& canframe::isExt()
{
    return m_isExt;
}


/*!
 * @brief This function sets a value in member errorCode
 * @param _errorCode New value for member errorCode
 */
void canframe::errorCode(
        uint8_t _errorCode)
{
    m_errorCode = _errorCode;
}

/*!
 * @brief This function returns the value of member errorCode
 * @return Value of member errorCode
 */
uint8_t canframe::errorCode() const
{
    return m_errorCode;
}

/*!
 * @brief This function returns a reference to member errorCode
 * @return Reference to member errorCode
 */
uint8_t& canframe::errorCode()
{
    return m_errorCode;
}


/*!
 * @brief This function sets a value in member containerPduFlag
 * @param _containerPduFlag New value for member containerPduFlag
 */
void canframe::containerPduFlag(
        bool _containerPduFlag)
{
    m_containerPduFlag = _containerPduFlag;
}

/*!
 * @brief This function returns the value of member containerPduFlag
 * @return Value of member containerPduFlag
 */
bool canframe::containerPduFlag() const
{
    return m_containerPduFlag;
}

/*!
 * @brief This function returns a reference to member containerPduFlag
 * @return Reference to member containerPduFlag
 */
bool& canframe::containerPduFlag()
{
    return m_containerPduFlag;
}


/*!
 * @brief This function sets a value in member pduFlag
 * @param _pduFlag New value for member pduFlag
 */
void canframe::pduFlag(
        bool _pduFlag)
{
    m_pduFlag = _pduFlag;
}

/*!
 * @brief This function returns the value of member pduFlag
 * @return Value of member pduFlag
 */
bool canframe::pduFlag() const
{
    return m_pduFlag;
}

/*!
 * @brief This function returns a reference to member pduFlag
 * @return Reference to member pduFlag
 */
bool& canframe::pduFlag()
{
    return m_pduFlag;
}


/*!
 * @brief This function copies the value in member containPduNames
 * @param _containPduNames New value to be copied in member containPduNames
 */
void canframe::containPduNames(
        const std::vector<std::string>& _containPduNames)
{
    m_containPduNames = _containPduNames;
}

/*!
 * @brief This function moves the value in member containPduNames
 * @param _containPduNames New value to be moved in member containPduNames
 */
void canframe::containPduNames(
        std::vector<std::string>&& _containPduNames)
{
    m_containPduNames = std::move(_containPduNames);
}

/*!
 * @brief This function returns a constant reference to member containPduNames
 * @return Constant reference to member containPduNames
 */
const std::vector<std::string>& canframe::containPduNames() const
{
    return m_containPduNames;
}

/*!
 * @brief This function returns a reference to member containPduNames
 * @return Reference to member containPduNames
 */
std::vector<std::string>& canframe::containPduNames()
{
    return m_containPduNames;
}


/*!
 * @brief This function copies the value in member containPduNum
 * @param _containPduNum New value to be copied in member containPduNum
 */
void canframe::containPduNum(
        const std::vector<uint32_t>& _containPduNum)
{
    m_containPduNum = _containPduNum;
}

/*!
 * @brief This function moves the value in member containPduNum
 * @param _containPduNum New value to be moved in member containPduNum
 */
void canframe::containPduNum(
        std::vector<uint32_t>&& _containPduNum)
{
    m_containPduNum = std::move(_containPduNum);
}

/*!
 * @brief This function returns a constant reference to member containPduNum
 * @return Constant reference to member containPduNum
 */
const std::vector<uint32_t>& canframe::containPduNum() const
{
    return m_containPduNum;
}

/*!
 * @brief This function returns a reference to member containPduNum
 * @return Reference to member containPduNum
 */
std::vector<uint32_t>& canframe::containPduNum()
{
    return m_containPduNum;
}


/*!
 * @brief This function copies the value in member containPdus
 * @param _containPdus New value to be copied in member containPdus
 */
void canframe::containPdus(
        const std::vector<canpdu>& _containPdus)
{
    m_containPdus = _containPdus;
}

/*!
 * @brief This function moves the value in member containPdus
 * @param _containPdus New value to be moved in member containPdus
 */
void canframe::containPdus(
        std::vector<canpdu>&& _containPdus)
{
    m_containPdus = std::move(_containPdus);
}

/*!
 * @brief This function returns a constant reference to member containPdus
 * @return Constant reference to member containPdus
 */
const std::vector<canpdu>& canframe::containPdus() const
{
    return m_containPdus;
}

/*!
 * @brief This function returns a reference to member containPdus
 * @return Reference to member containPdus
 */
std::vector<canpdu>& canframe::containPdus()
{
    return m_containPdus;
}


/*!
 * @brief This function copies the value in member pdus
 * @param _pdus New value to be copied in member pdus
 */
void canframe::pdus(
        const std::vector<canpdu>& _pdus)
{
    m_pdus = _pdus;
}

/*!
 * @brief This function moves the value in member pdus
 * @param _pdus New value to be moved in member pdus
 */
void canframe::pdus(
        std::vector<canpdu>&& _pdus)
{
    m_pdus = std::move(_pdus);
}

/*!
 * @brief This function returns a constant reference to member pdus
 * @return Constant reference to member pdus
 */
const std::vector<canpdu>& canframe::pdus() const
{
    return m_pdus;
}

/*!
 * @brief This function returns a reference to member pdus
 * @return Reference to member pdus
 */
std::vector<canpdu>& canframe::pdus()
{
    return m_pdus;
}


/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void canframe::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void canframe::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& canframe::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& canframe::name()
{
    return m_name;
}




canMessage::canMessage()
{
}

canMessage::~canMessage()
{
}

canMessage::canMessage(
        const canMessage& x)
{
    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_dataLen = x.m_dataLen;
    m_data = x.m_data;
    m_cycTime = x.m_cycTime;
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_isFd = x.m_isFd;
    m_isRt = x.m_isRt;
    m_isExt = x.m_isExt;
    m_errorCode = x.m_errorCode;
}

canMessage::canMessage(
        canMessage&& x) noexcept
{
    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_dataLen = x.m_dataLen;
    m_data = std::move(x.m_data);
    m_cycTime = x.m_cycTime;
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_isFd = x.m_isFd;
    m_isRt = x.m_isRt;
    m_isExt = x.m_isExt;
    m_errorCode = x.m_errorCode;
}

canMessage& canMessage::operator =(
        const canMessage& x)
{

    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_dataLen = x.m_dataLen;
    m_data = x.m_data;
    m_cycTime = x.m_cycTime;
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_isFd = x.m_isFd;
    m_isRt = x.m_isRt;
    m_isExt = x.m_isExt;
    m_errorCode = x.m_errorCode;
    return *this;
}

canMessage& canMessage::operator =(
        canMessage&& x) noexcept
{

    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_dataLen = x.m_dataLen;
    m_data = std::move(x.m_data);
    m_cycTime = x.m_cycTime;
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_isFd = x.m_isFd;
    m_isRt = x.m_isRt;
    m_isExt = x.m_isExt;
    m_errorCode = x.m_errorCode;
    return *this;
}

bool canMessage::operator ==(
        const canMessage& x) const
{
    return (m_channel == x.m_channel &&
           m_id == x.m_id &&
           m_dlc == x.m_dlc &&
           m_dataLen == x.m_dataLen &&
           m_data == x.m_data &&
           m_cycTime == x.m_cycTime &&
           m_flags == x.m_flags &&
           m_timeStamp == x.m_timeStamp &&
           m_timeStamp_d == x.m_timeStamp_d &&
           m_rxtx == x.m_rxtx &&
           m_isFd == x.m_isFd &&
           m_isRt == x.m_isRt &&
           m_isExt == x.m_isExt &&
           m_errorCode == x.m_errorCode);
}

bool canMessage::operator !=(
        const canMessage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member channel
 * @param _channel New value for member channel
 */
void canMessage::channel(
        uint32_t _channel)
{
    m_channel = _channel;
}

/*!
 * @brief This function returns the value of member channel
 * @return Value of member channel
 */
uint32_t canMessage::channel() const
{
    return m_channel;
}

/*!
 * @brief This function returns a reference to member channel
 * @return Reference to member channel
 */
uint32_t& canMessage::channel()
{
    return m_channel;
}


/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void canMessage::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t canMessage::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& canMessage::id()
{
    return m_id;
}


/*!
 * @brief This function sets a value in member dlc
 * @param _dlc New value for member dlc
 */
void canMessage::dlc(
        uint8_t _dlc)
{
    m_dlc = _dlc;
}

/*!
 * @brief This function returns the value of member dlc
 * @return Value of member dlc
 */
uint8_t canMessage::dlc() const
{
    return m_dlc;
}

/*!
 * @brief This function returns a reference to member dlc
 * @return Reference to member dlc
 */
uint8_t& canMessage::dlc()
{
    return m_dlc;
}


/*!
 * @brief This function sets a value in member dataLen
 * @param _dataLen New value for member dataLen
 */
void canMessage::dataLen(
        uint16_t _dataLen)
{
    m_dataLen = _dataLen;
}

/*!
 * @brief This function returns the value of member dataLen
 * @return Value of member dataLen
 */
uint16_t canMessage::dataLen() const
{
    return m_dataLen;
}

/*!
 * @brief This function returns a reference to member dataLen
 * @return Reference to member dataLen
 */
uint16_t& canMessage::dataLen()
{
    return m_dataLen;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void canMessage::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void canMessage::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& canMessage::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& canMessage::data()
{
    return m_data;
}


/*!
 * @brief This function sets a value in member cycTime
 * @param _cycTime New value for member cycTime
 */
void canMessage::cycTime(
        uint64_t _cycTime)
{
    m_cycTime = _cycTime;
}

/*!
 * @brief This function returns the value of member cycTime
 * @return Value of member cycTime
 */
uint64_t canMessage::cycTime() const
{
    return m_cycTime;
}

/*!
 * @brief This function returns a reference to member cycTime
 * @return Reference to member cycTime
 */
uint64_t& canMessage::cycTime()
{
    return m_cycTime;
}


/*!
 * @brief This function sets a value in member flags
 * @param _flags New value for member flags
 */
void canMessage::flags(
        uint16_t _flags)
{
    m_flags = _flags;
}

/*!
 * @brief This function returns the value of member flags
 * @return Value of member flags
 */
uint16_t canMessage::flags() const
{
    return m_flags;
}

/*!
 * @brief This function returns a reference to member flags
 * @return Reference to member flags
 */
uint16_t& canMessage::flags()
{
    return m_flags;
}


/*!
 * @brief This function sets a value in member timeStamp
 * @param _timeStamp New value for member timeStamp
 */
void canMessage::timeStamp(
        uint64_t _timeStamp)
{
    m_timeStamp = _timeStamp;
}

/*!
 * @brief This function returns the value of member timeStamp
 * @return Value of member timeStamp
 */
uint64_t canMessage::timeStamp() const
{
    return m_timeStamp;
}

/*!
 * @brief This function returns a reference to member timeStamp
 * @return Reference to member timeStamp
 */
uint64_t& canMessage::timeStamp()
{
    return m_timeStamp;
}


/*!
 * @brief This function sets a value in member timeStamp_d
 * @param _timeStamp_d New value for member timeStamp_d
 */
void canMessage::timeStamp_d(
        int64_t _timeStamp_d)
{
    m_timeStamp_d = _timeStamp_d;
}

/*!
 * @brief This function returns the value of member timeStamp_d
 * @return Value of member timeStamp_d
 */
int64_t canMessage::timeStamp_d() const
{
    return m_timeStamp_d;
}

/*!
 * @brief This function returns a reference to member timeStamp_d
 * @return Reference to member timeStamp_d
 */
int64_t& canMessage::timeStamp_d()
{
    return m_timeStamp_d;
}


/*!
 * @brief This function sets a value in member rxtx
 * @param _rxtx New value for member rxtx
 */
void canMessage::rxtx(
        uint8_t _rxtx)
{
    m_rxtx = _rxtx;
}

/*!
 * @brief This function returns the value of member rxtx
 * @return Value of member rxtx
 */
uint8_t canMessage::rxtx() const
{
    return m_rxtx;
}

/*!
 * @brief This function returns a reference to member rxtx
 * @return Reference to member rxtx
 */
uint8_t& canMessage::rxtx()
{
    return m_rxtx;
}


/*!
 * @brief This function sets a value in member isFd
 * @param _isFd New value for member isFd
 */
void canMessage::isFd(
        uint8_t _isFd)
{
    m_isFd = _isFd;
}

/*!
 * @brief This function returns the value of member isFd
 * @return Value of member isFd
 */
uint8_t canMessage::isFd() const
{
    return m_isFd;
}

/*!
 * @brief This function returns a reference to member isFd
 * @return Reference to member isFd
 */
uint8_t& canMessage::isFd()
{
    return m_isFd;
}


/*!
 * @brief This function sets a value in member isRt
 * @param _isRt New value for member isRt
 */
void canMessage::isRt(
        uint8_t _isRt)
{
    m_isRt = _isRt;
}

/*!
 * @brief This function returns the value of member isRt
 * @return Value of member isRt
 */
uint8_t canMessage::isRt() const
{
    return m_isRt;
}

/*!
 * @brief This function returns a reference to member isRt
 * @return Reference to member isRt
 */
uint8_t& canMessage::isRt()
{
    return m_isRt;
}


/*!
 * @brief This function sets a value in member isExt
 * @param _isExt New value for member isExt
 */
void canMessage::isExt(
        uint8_t _isExt)
{
    m_isExt = _isExt;
}

/*!
 * @brief This function returns the value of member isExt
 * @return Value of member isExt
 */
uint8_t canMessage::isExt() const
{
    return m_isExt;
}

/*!
 * @brief This function returns a reference to member isExt
 * @return Reference to member isExt
 */
uint8_t& canMessage::isExt()
{
    return m_isExt;
}


/*!
 * @brief This function sets a value in member errorCode
 * @param _errorCode New value for member errorCode
 */
void canMessage::errorCode(
        uint8_t _errorCode)
{
    m_errorCode = _errorCode;
}

/*!
 * @brief This function returns the value of member errorCode
 * @return Value of member errorCode
 */
uint8_t canMessage::errorCode() const
{
    return m_errorCode;
}

/*!
 * @brief This function returns a reference to member errorCode
 * @return Reference to member errorCode
 */
uint8_t& canMessage::errorCode()
{
    return m_errorCode;
}






canMessages::canMessages()
{
}

canMessages::~canMessages()
{
}

canMessages::canMessages(
        const canMessages& x)
{
    m_len = x.m_len;
    m_canMsgs = x.m_canMsgs;
}

canMessages::canMessages(
        canMessages&& x) noexcept
{
    m_len = x.m_len;
    m_canMsgs = std::move(x.m_canMsgs);
}

canMessages& canMessages::operator =(
        const canMessages& x)
{

    m_len = x.m_len;
    m_canMsgs = x.m_canMsgs;
    return *this;
}

canMessages& canMessages::operator =(
        canMessages&& x) noexcept
{

    m_len = x.m_len;
    m_canMsgs = std::move(x.m_canMsgs);
    return *this;
}

bool canMessages::operator ==(
        const canMessages& x) const
{
    return (m_len == x.m_len &&
           m_canMsgs == x.m_canMsgs);
}

bool canMessages::operator !=(
        const canMessages& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member len
 * @param _len New value for member len
 */
void canMessages::len(
        uint64_t _len)
{
    m_len = _len;
}

/*!
 * @brief This function returns the value of member len
 * @return Value of member len
 */
uint64_t canMessages::len() const
{
    return m_len;
}

/*!
 * @brief This function returns a reference to member len
 * @return Reference to member len
 */
uint64_t& canMessages::len()
{
    return m_len;
}


/*!
 * @brief This function copies the value in member canMsgs
 * @param _canMsgs New value to be copied in member canMsgs
 */
void canMessages::canMsgs(
        const std::vector<canMessage>& _canMsgs)
{
    m_canMsgs = _canMsgs;
}

/*!
 * @brief This function moves the value in member canMsgs
 * @param _canMsgs New value to be moved in member canMsgs
 */
void canMessages::canMsgs(
        std::vector<canMessage>&& _canMsgs)
{
    m_canMsgs = std::move(_canMsgs);
}

/*!
 * @brief This function returns a constant reference to member canMsgs
 * @return Constant reference to member canMsgs
 */
const std::vector<canMessage>& canMessages::canMsgs() const
{
    return m_canMsgs;
}

/*!
 * @brief This function returns a reference to member canMsgs
 * @return Reference to member canMsgs
 */
std::vector<canMessage>& canMessages::canMsgs()
{
    return m_canMsgs;
}






doipMessage::doipMessage()
{
}

doipMessage::~doipMessage()
{
}

doipMessage::doipMessage(
        const doipMessage& x)
{
    m_targetAddress = x.m_targetAddress;
    m_headerType = x.m_headerType;
    m_cmd = x.m_cmd;
}

doipMessage::doipMessage(
        doipMessage&& x) noexcept
{
    m_targetAddress = x.m_targetAddress;
    m_headerType = x.m_headerType;
    m_cmd = std::move(x.m_cmd);
}

doipMessage& doipMessage::operator =(
        const doipMessage& x)
{

    m_targetAddress = x.m_targetAddress;
    m_headerType = x.m_headerType;
    m_cmd = x.m_cmd;
    return *this;
}

doipMessage& doipMessage::operator =(
        doipMessage&& x) noexcept
{

    m_targetAddress = x.m_targetAddress;
    m_headerType = x.m_headerType;
    m_cmd = std::move(x.m_cmd);
    return *this;
}

bool doipMessage::operator ==(
        const doipMessage& x) const
{
    return (m_targetAddress == x.m_targetAddress &&
           m_headerType == x.m_headerType &&
           m_cmd == x.m_cmd);
}

bool doipMessage::operator !=(
        const doipMessage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member targetAddress
 * @param _targetAddress New value for member targetAddress
 */
void doipMessage::targetAddress(
        uint32_t _targetAddress)
{
    m_targetAddress = _targetAddress;
}

/*!
 * @brief This function returns the value of member targetAddress
 * @return Value of member targetAddress
 */
uint32_t doipMessage::targetAddress() const
{
    return m_targetAddress;
}

/*!
 * @brief This function returns a reference to member targetAddress
 * @return Reference to member targetAddress
 */
uint32_t& doipMessage::targetAddress()
{
    return m_targetAddress;
}


/*!
 * @brief This function sets a value in member headerType
 * @param _headerType New value for member headerType
 */
void doipMessage::headerType(
        uint32_t _headerType)
{
    m_headerType = _headerType;
}

/*!
 * @brief This function returns the value of member headerType
 * @return Value of member headerType
 */
uint32_t doipMessage::headerType() const
{
    return m_headerType;
}

/*!
 * @brief This function returns a reference to member headerType
 * @return Reference to member headerType
 */
uint32_t& doipMessage::headerType()
{
    return m_headerType;
}


/*!
 * @brief This function copies the value in member cmd
 * @param _cmd New value to be copied in member cmd
 */
void doipMessage::cmd(
        const std::vector<uint8_t>& _cmd)
{
    m_cmd = _cmd;
}

/*!
 * @brief This function moves the value in member cmd
 * @param _cmd New value to be moved in member cmd
 */
void doipMessage::cmd(
        std::vector<uint8_t>&& _cmd)
{
    m_cmd = std::move(_cmd);
}

/*!
 * @brief This function returns a constant reference to member cmd
 * @return Constant reference to member cmd
 */
const std::vector<uint8_t>& doipMessage::cmd() const
{
    return m_cmd;
}

/*!
 * @brief This function returns a reference to member cmd
 * @return Reference to member cmd
 */
std::vector<uint8_t>& doipMessage::cmd()
{
    return m_cmd;
}




ethFrame::ethFrame()
{
}

ethFrame::~ethFrame()
{
}

ethFrame::ethFrame(
        const ethFrame& x)
{
    m_sourceAddress = x.m_sourceAddress;
    m_channle = x.m_channle;
    m_destinationAddress = x.m_destinationAddress;
    m_dir = x.m_dir;
    m_type = x.m_type;
    m_tpid = x.m_tpid;
    m_tci = x.m_tci;
    m_payLoadLength = x.m_payLoadLength;
    m_reservedEthernetFrame = x.m_reservedEthernetFrame;
    m_payLoad = x.m_payLoad;
    m_timeStamp = x.m_timeStamp;
}

ethFrame::ethFrame(
        ethFrame&& x) noexcept
{
    m_sourceAddress = std::move(x.m_sourceAddress);
    m_channle = x.m_channle;
    m_destinationAddress = std::move(x.m_destinationAddress);
    m_dir = x.m_dir;
    m_type = x.m_type;
    m_tpid = x.m_tpid;
    m_tci = x.m_tci;
    m_payLoadLength = x.m_payLoadLength;
    m_reservedEthernetFrame = x.m_reservedEthernetFrame;
    m_payLoad = std::move(x.m_payLoad);
    m_timeStamp = x.m_timeStamp;
}

ethFrame& ethFrame::operator =(
        const ethFrame& x)
{

    m_sourceAddress = x.m_sourceAddress;
    m_channle = x.m_channle;
    m_destinationAddress = x.m_destinationAddress;
    m_dir = x.m_dir;
    m_type = x.m_type;
    m_tpid = x.m_tpid;
    m_tci = x.m_tci;
    m_payLoadLength = x.m_payLoadLength;
    m_reservedEthernetFrame = x.m_reservedEthernetFrame;
    m_payLoad = x.m_payLoad;
    m_timeStamp = x.m_timeStamp;
    return *this;
}

ethFrame& ethFrame::operator =(
        ethFrame&& x) noexcept
{

    m_sourceAddress = std::move(x.m_sourceAddress);
    m_channle = x.m_channle;
    m_destinationAddress = std::move(x.m_destinationAddress);
    m_dir = x.m_dir;
    m_type = x.m_type;
    m_tpid = x.m_tpid;
    m_tci = x.m_tci;
    m_payLoadLength = x.m_payLoadLength;
    m_reservedEthernetFrame = x.m_reservedEthernetFrame;
    m_payLoad = std::move(x.m_payLoad);
    m_timeStamp = x.m_timeStamp;
    return *this;
}

bool ethFrame::operator ==(
        const ethFrame& x) const
{
    return (m_sourceAddress == x.m_sourceAddress &&
           m_channle == x.m_channle &&
           m_destinationAddress == x.m_destinationAddress &&
           m_dir == x.m_dir &&
           m_type == x.m_type &&
           m_tpid == x.m_tpid &&
           m_tci == x.m_tci &&
           m_payLoadLength == x.m_payLoadLength &&
           m_reservedEthernetFrame == x.m_reservedEthernetFrame &&
           m_payLoad == x.m_payLoad &&
           m_timeStamp == x.m_timeStamp);
}

bool ethFrame::operator !=(
        const ethFrame& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member sourceAddress
 * @param _sourceAddress New value to be copied in member sourceAddress
 */
void ethFrame::sourceAddress(
        const std::array<uint8_t, 6>& _sourceAddress)
{
    m_sourceAddress = _sourceAddress;
}

/*!
 * @brief This function moves the value in member sourceAddress
 * @param _sourceAddress New value to be moved in member sourceAddress
 */
void ethFrame::sourceAddress(
        std::array<uint8_t, 6>&& _sourceAddress)
{
    m_sourceAddress = std::move(_sourceAddress);
}

/*!
 * @brief This function returns a constant reference to member sourceAddress
 * @return Constant reference to member sourceAddress
 */
const std::array<uint8_t, 6>& ethFrame::sourceAddress() const
{
    return m_sourceAddress;
}

/*!
 * @brief This function returns a reference to member sourceAddress
 * @return Reference to member sourceAddress
 */
std::array<uint8_t, 6>& ethFrame::sourceAddress()
{
    return m_sourceAddress;
}


/*!
 * @brief This function sets a value in member channle
 * @param _channle New value for member channle
 */
void ethFrame::channle(
        uint16_t _channle)
{
    m_channle = _channle;
}

/*!
 * @brief This function returns the value of member channle
 * @return Value of member channle
 */
uint16_t ethFrame::channle() const
{
    return m_channle;
}

/*!
 * @brief This function returns a reference to member channle
 * @return Reference to member channle
 */
uint16_t& ethFrame::channle()
{
    return m_channle;
}


/*!
 * @brief This function copies the value in member destinationAddress
 * @param _destinationAddress New value to be copied in member destinationAddress
 */
void ethFrame::destinationAddress(
        const std::array<uint8_t, 6>& _destinationAddress)
{
    m_destinationAddress = _destinationAddress;
}

/*!
 * @brief This function moves the value in member destinationAddress
 * @param _destinationAddress New value to be moved in member destinationAddress
 */
void ethFrame::destinationAddress(
        std::array<uint8_t, 6>&& _destinationAddress)
{
    m_destinationAddress = std::move(_destinationAddress);
}

/*!
 * @brief This function returns a constant reference to member destinationAddress
 * @return Constant reference to member destinationAddress
 */
const std::array<uint8_t, 6>& ethFrame::destinationAddress() const
{
    return m_destinationAddress;
}

/*!
 * @brief This function returns a reference to member destinationAddress
 * @return Reference to member destinationAddress
 */
std::array<uint8_t, 6>& ethFrame::destinationAddress()
{
    return m_destinationAddress;
}


/*!
 * @brief This function sets a value in member dir
 * @param _dir New value for member dir
 */
void ethFrame::dir(
        uint16_t _dir)
{
    m_dir = _dir;
}

/*!
 * @brief This function returns the value of member dir
 * @return Value of member dir
 */
uint16_t ethFrame::dir() const
{
    return m_dir;
}

/*!
 * @brief This function returns a reference to member dir
 * @return Reference to member dir
 */
uint16_t& ethFrame::dir()
{
    return m_dir;
}


/*!
 * @brief This function sets a value in member type
 * @param _type New value for member type
 */
void ethFrame::type(
        uint16_t _type)
{
    m_type = _type;
}

/*!
 * @brief This function returns the value of member type
 * @return Value of member type
 */
uint16_t ethFrame::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
uint16_t& ethFrame::type()
{
    return m_type;
}


/*!
 * @brief This function sets a value in member tpid
 * @param _tpid New value for member tpid
 */
void ethFrame::tpid(
        uint16_t _tpid)
{
    m_tpid = _tpid;
}

/*!
 * @brief This function returns the value of member tpid
 * @return Value of member tpid
 */
uint16_t ethFrame::tpid() const
{
    return m_tpid;
}

/*!
 * @brief This function returns a reference to member tpid
 * @return Reference to member tpid
 */
uint16_t& ethFrame::tpid()
{
    return m_tpid;
}


/*!
 * @brief This function sets a value in member tci
 * @param _tci New value for member tci
 */
void ethFrame::tci(
        uint16_t _tci)
{
    m_tci = _tci;
}

/*!
 * @brief This function returns the value of member tci
 * @return Value of member tci
 */
uint16_t ethFrame::tci() const
{
    return m_tci;
}

/*!
 * @brief This function returns a reference to member tci
 * @return Reference to member tci
 */
uint16_t& ethFrame::tci()
{
    return m_tci;
}


/*!
 * @brief This function sets a value in member payLoadLength
 * @param _payLoadLength New value for member payLoadLength
 */
void ethFrame::payLoadLength(
        uint16_t _payLoadLength)
{
    m_payLoadLength = _payLoadLength;
}

/*!
 * @brief This function returns the value of member payLoadLength
 * @return Value of member payLoadLength
 */
uint16_t ethFrame::payLoadLength() const
{
    return m_payLoadLength;
}

/*!
 * @brief This function returns a reference to member payLoadLength
 * @return Reference to member payLoadLength
 */
uint16_t& ethFrame::payLoadLength()
{
    return m_payLoadLength;
}


/*!
 * @brief This function sets a value in member reservedEthernetFrame
 * @param _reservedEthernetFrame New value for member reservedEthernetFrame
 */
void ethFrame::reservedEthernetFrame(
        uint64_t _reservedEthernetFrame)
{
    m_reservedEthernetFrame = _reservedEthernetFrame;
}

/*!
 * @brief This function returns the value of member reservedEthernetFrame
 * @return Value of member reservedEthernetFrame
 */
uint64_t ethFrame::reservedEthernetFrame() const
{
    return m_reservedEthernetFrame;
}

/*!
 * @brief This function returns a reference to member reservedEthernetFrame
 * @return Reference to member reservedEthernetFrame
 */
uint64_t& ethFrame::reservedEthernetFrame()
{
    return m_reservedEthernetFrame;
}


/*!
 * @brief This function copies the value in member payLoad
 * @param _payLoad New value to be copied in member payLoad
 */
void ethFrame::payLoad(
        const std::vector<uint8_t>& _payLoad)
{
    m_payLoad = _payLoad;
}

/*!
 * @brief This function moves the value in member payLoad
 * @param _payLoad New value to be moved in member payLoad
 */
void ethFrame::payLoad(
        std::vector<uint8_t>&& _payLoad)
{
    m_payLoad = std::move(_payLoad);
}

/*!
 * @brief This function returns a constant reference to member payLoad
 * @return Constant reference to member payLoad
 */
const std::vector<uint8_t>& ethFrame::payLoad() const
{
    return m_payLoad;
}

/*!
 * @brief This function returns a reference to member payLoad
 * @return Reference to member payLoad
 */
std::vector<uint8_t>& ethFrame::payLoad()
{
    return m_payLoad;
}


/*!
 * @brief This function sets a value in member timeStamp
 * @param _timeStamp New value for member timeStamp
 */
void ethFrame::timeStamp(
        uint64_t _timeStamp)
{
    m_timeStamp = _timeStamp;
}

/*!
 * @brief This function returns the value of member timeStamp
 * @return Value of member timeStamp
 */
uint64_t ethFrame::timeStamp() const
{
    return m_timeStamp;
}

/*!
 * @brief This function returns a reference to member timeStamp
 * @return Reference to member timeStamp
 */
uint64_t& ethFrame::timeStamp()
{
    return m_timeStamp;
}




linSignal::linSignal()
{
}

linSignal::~linSignal()
{
}

linSignal::linSignal(
        const linSignal& x)
{
    m_name = x.m_name;
    m_raw_value = x.m_raw_value;
    m_phy_value = x.m_phy_value;
    m_logical_value = x.m_logical_value;
}

linSignal::linSignal(
        linSignal&& x) noexcept
{
    m_name = std::move(x.m_name);
    m_raw_value = x.m_raw_value;
    m_phy_value = std::move(x.m_phy_value);
    m_logical_value = std::move(x.m_logical_value);
}

linSignal& linSignal::operator =(
        const linSignal& x)
{

    m_name = x.m_name;
    m_raw_value = x.m_raw_value;
    m_phy_value = x.m_phy_value;
    m_logical_value = x.m_logical_value;
    return *this;
}

linSignal& linSignal::operator =(
        linSignal&& x) noexcept
{

    m_name = std::move(x.m_name);
    m_raw_value = x.m_raw_value;
    m_phy_value = std::move(x.m_phy_value);
    m_logical_value = std::move(x.m_logical_value);
    return *this;
}

bool linSignal::operator ==(
        const linSignal& x) const
{
    return (m_name == x.m_name &&
           m_raw_value == x.m_raw_value &&
           m_phy_value == x.m_phy_value &&
           m_logical_value == x.m_logical_value);
}

bool linSignal::operator !=(
        const linSignal& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void linSignal::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void linSignal::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& linSignal::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& linSignal::name()
{
    return m_name;
}


/*!
 * @brief This function sets a value in member raw_value
 * @param _raw_value New value for member raw_value
 */
void linSignal::raw_value(
        uint64_t _raw_value)
{
    m_raw_value = _raw_value;
}

/*!
 * @brief This function returns the value of member raw_value
 * @return Value of member raw_value
 */
uint64_t linSignal::raw_value() const
{
    return m_raw_value;
}

/*!
 * @brief This function returns a reference to member raw_value
 * @return Reference to member raw_value
 */
uint64_t& linSignal::raw_value()
{
    return m_raw_value;
}


/*!
 * @brief This function copies the value in member phy_value
 * @param _phy_value New value to be copied in member phy_value
 */
void linSignal::phy_value(
        const std::string& _phy_value)
{
    m_phy_value = _phy_value;
}

/*!
 * @brief This function moves the value in member phy_value
 * @param _phy_value New value to be moved in member phy_value
 */
void linSignal::phy_value(
        std::string&& _phy_value)
{
    m_phy_value = std::move(_phy_value);
}

/*!
 * @brief This function returns a constant reference to member phy_value
 * @return Constant reference to member phy_value
 */
const std::string& linSignal::phy_value() const
{
    return m_phy_value;
}

/*!
 * @brief This function returns a reference to member phy_value
 * @return Reference to member phy_value
 */
std::string& linSignal::phy_value()
{
    return m_phy_value;
}


/*!
 * @brief This function copies the value in member logical_value
 * @param _logical_value New value to be copied in member logical_value
 */
void linSignal::logical_value(
        const std::string& _logical_value)
{
    m_logical_value = _logical_value;
}

/*!
 * @brief This function moves the value in member logical_value
 * @param _logical_value New value to be moved in member logical_value
 */
void linSignal::logical_value(
        std::string&& _logical_value)
{
    m_logical_value = std::move(_logical_value);
}

/*!
 * @brief This function returns a constant reference to member logical_value
 * @return Constant reference to member logical_value
 */
const std::string& linSignal::logical_value() const
{
    return m_logical_value;
}

/*!
 * @brief This function returns a reference to member logical_value
 * @return Reference to member logical_value
 */
std::string& linSignal::logical_value()
{
    return m_logical_value;
}




linFrame::linFrame()
{
}

linFrame::~linFrame()
{
}

linFrame::linFrame(
        const linFrame& x)
{
    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_data = x.m_data;
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_errorCode = x.m_errorCode;
    m_NMstate = x.m_NMstate;
    m_isMasterFrame = x.m_isMasterFrame;
    m_signals = x.m_signals;
    m_name = x.m_name;
}

linFrame::linFrame(
        linFrame&& x) noexcept
{
    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_data = std::move(x.m_data);
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_errorCode = x.m_errorCode;
    m_NMstate = x.m_NMstate;
    m_isMasterFrame = x.m_isMasterFrame;
    m_signals = std::move(x.m_signals);
    m_name = std::move(x.m_name);
}

linFrame& linFrame::operator =(
        const linFrame& x)
{

    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_data = x.m_data;
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_errorCode = x.m_errorCode;
    m_NMstate = x.m_NMstate;
    m_isMasterFrame = x.m_isMasterFrame;
    m_signals = x.m_signals;
    m_name = x.m_name;
    return *this;
}

linFrame& linFrame::operator =(
        linFrame&& x) noexcept
{

    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_data = std::move(x.m_data);
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_errorCode = x.m_errorCode;
    m_NMstate = x.m_NMstate;
    m_isMasterFrame = x.m_isMasterFrame;
    m_signals = std::move(x.m_signals);
    m_name = std::move(x.m_name);
    return *this;
}

bool linFrame::operator ==(
        const linFrame& x) const
{
    return (m_channel == x.m_channel &&
           m_id == x.m_id &&
           m_dlc == x.m_dlc &&
           m_data == x.m_data &&
           m_flags == x.m_flags &&
           m_timeStamp == x.m_timeStamp &&
           m_timeStamp_d == x.m_timeStamp_d &&
           m_rxtx == x.m_rxtx &&
           m_errorCode == x.m_errorCode &&
           m_NMstate == x.m_NMstate &&
           m_isMasterFrame == x.m_isMasterFrame &&
           m_signals == x.m_signals &&
           m_name == x.m_name);
}

bool linFrame::operator !=(
        const linFrame& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member channel
 * @param _channel New value for member channel
 */
void linFrame::channel(
        uint32_t _channel)
{
    m_channel = _channel;
}

/*!
 * @brief This function returns the value of member channel
 * @return Value of member channel
 */
uint32_t linFrame::channel() const
{
    return m_channel;
}

/*!
 * @brief This function returns a reference to member channel
 * @return Reference to member channel
 */
uint32_t& linFrame::channel()
{
    return m_channel;
}


/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void linFrame::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t linFrame::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& linFrame::id()
{
    return m_id;
}


/*!
 * @brief This function sets a value in member dlc
 * @param _dlc New value for member dlc
 */
void linFrame::dlc(
        uint8_t _dlc)
{
    m_dlc = _dlc;
}

/*!
 * @brief This function returns the value of member dlc
 * @return Value of member dlc
 */
uint8_t linFrame::dlc() const
{
    return m_dlc;
}

/*!
 * @brief This function returns a reference to member dlc
 * @return Reference to member dlc
 */
uint8_t& linFrame::dlc()
{
    return m_dlc;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void linFrame::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void linFrame::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& linFrame::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& linFrame::data()
{
    return m_data;
}


/*!
 * @brief This function sets a value in member flags
 * @param _flags New value for member flags
 */
void linFrame::flags(
        uint16_t _flags)
{
    m_flags = _flags;
}

/*!
 * @brief This function returns the value of member flags
 * @return Value of member flags
 */
uint16_t linFrame::flags() const
{
    return m_flags;
}

/*!
 * @brief This function returns a reference to member flags
 * @return Reference to member flags
 */
uint16_t& linFrame::flags()
{
    return m_flags;
}


/*!
 * @brief This function sets a value in member timeStamp
 * @param _timeStamp New value for member timeStamp
 */
void linFrame::timeStamp(
        uint64_t _timeStamp)
{
    m_timeStamp = _timeStamp;
}

/*!
 * @brief This function returns the value of member timeStamp
 * @return Value of member timeStamp
 */
uint64_t linFrame::timeStamp() const
{
    return m_timeStamp;
}

/*!
 * @brief This function returns a reference to member timeStamp
 * @return Reference to member timeStamp
 */
uint64_t& linFrame::timeStamp()
{
    return m_timeStamp;
}


/*!
 * @brief This function sets a value in member timeStamp_d
 * @param _timeStamp_d New value for member timeStamp_d
 */
void linFrame::timeStamp_d(
        int64_t _timeStamp_d)
{
    m_timeStamp_d = _timeStamp_d;
}

/*!
 * @brief This function returns the value of member timeStamp_d
 * @return Value of member timeStamp_d
 */
int64_t linFrame::timeStamp_d() const
{
    return m_timeStamp_d;
}

/*!
 * @brief This function returns a reference to member timeStamp_d
 * @return Reference to member timeStamp_d
 */
int64_t& linFrame::timeStamp_d()
{
    return m_timeStamp_d;
}


/*!
 * @brief This function sets a value in member rxtx
 * @param _rxtx New value for member rxtx
 */
void linFrame::rxtx(
        uint8_t _rxtx)
{
    m_rxtx = _rxtx;
}

/*!
 * @brief This function returns the value of member rxtx
 * @return Value of member rxtx
 */
uint8_t linFrame::rxtx() const
{
    return m_rxtx;
}

/*!
 * @brief This function returns a reference to member rxtx
 * @return Reference to member rxtx
 */
uint8_t& linFrame::rxtx()
{
    return m_rxtx;
}


/*!
 * @brief This function sets a value in member errorCode
 * @param _errorCode New value for member errorCode
 */
void linFrame::errorCode(
        uint8_t _errorCode)
{
    m_errorCode = _errorCode;
}

/*!
 * @brief This function returns the value of member errorCode
 * @return Value of member errorCode
 */
uint8_t linFrame::errorCode() const
{
    return m_errorCode;
}

/*!
 * @brief This function returns a reference to member errorCode
 * @return Reference to member errorCode
 */
uint8_t& linFrame::errorCode()
{
    return m_errorCode;
}


/*!
 * @brief This function sets a value in member NMstate
 * @param _NMstate New value for member NMstate
 */
void linFrame::NMstate(
        uint8_t _NMstate)
{
    m_NMstate = _NMstate;
}

/*!
 * @brief This function returns the value of member NMstate
 * @return Value of member NMstate
 */
uint8_t linFrame::NMstate() const
{
    return m_NMstate;
}

/*!
 * @brief This function returns a reference to member NMstate
 * @return Reference to member NMstate
 */
uint8_t& linFrame::NMstate()
{
    return m_NMstate;
}


/*!
 * @brief This function sets a value in member isMasterFrame
 * @param _isMasterFrame New value for member isMasterFrame
 */
void linFrame::isMasterFrame(
        uint8_t _isMasterFrame)
{
    m_isMasterFrame = _isMasterFrame;
}

/*!
 * @brief This function returns the value of member isMasterFrame
 * @return Value of member isMasterFrame
 */
uint8_t linFrame::isMasterFrame() const
{
    return m_isMasterFrame;
}

/*!
 * @brief This function returns a reference to member isMasterFrame
 * @return Reference to member isMasterFrame
 */
uint8_t& linFrame::isMasterFrame()
{
    return m_isMasterFrame;
}


/*!
 * @brief This function copies the value in member signals
 * @param _signals New value to be copied in member signals
 */
void linFrame::signals(
        const std::vector<linSignal>& _signals)
{
    m_signals = _signals;
}

/*!
 * @brief This function moves the value in member signals
 * @param _signals New value to be moved in member signals
 */
void linFrame::signals(
        std::vector<linSignal>&& _signals)
{
    m_signals = std::move(_signals);
}

/*!
 * @brief This function returns a constant reference to member signals
 * @return Constant reference to member signals
 */
const std::vector<linSignal>& linFrame::signals() const
{
    return m_signals;
}

/*!
 * @brief This function returns a reference to member signals
 * @return Reference to member signals
 */
std::vector<linSignal>& linFrame::signals()
{
    return m_signals;
}


/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void linFrame::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void linFrame::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& linFrame::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& linFrame::name()
{
    return m_name;
}






linFrames::linFrames()
{
}

linFrames::~linFrames()
{
}

linFrames::linFrames(
        const linFrames& x)
{
    m_len = x.m_len;
    m_linframes = x.m_linframes;
}

linFrames::linFrames(
        linFrames&& x) noexcept
{
    m_len = x.m_len;
    m_linframes = std::move(x.m_linframes);
}

linFrames& linFrames::operator =(
        const linFrames& x)
{

    m_len = x.m_len;
    m_linframes = x.m_linframes;
    return *this;
}

linFrames& linFrames::operator =(
        linFrames&& x) noexcept
{

    m_len = x.m_len;
    m_linframes = std::move(x.m_linframes);
    return *this;
}

bool linFrames::operator ==(
        const linFrames& x) const
{
    return (m_len == x.m_len &&
           m_linframes == x.m_linframes);
}

bool linFrames::operator !=(
        const linFrames& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member len
 * @param _len New value for member len
 */
void linFrames::len(
        uint64_t _len)
{
    m_len = _len;
}

/*!
 * @brief This function returns the value of member len
 * @return Value of member len
 */
uint64_t linFrames::len() const
{
    return m_len;
}

/*!
 * @brief This function returns a reference to member len
 * @return Reference to member len
 */
uint64_t& linFrames::len()
{
    return m_len;
}


/*!
 * @brief This function copies the value in member linframes
 * @param _linframes New value to be copied in member linframes
 */
void linFrames::linframes(
        const std::vector<linFrame>& _linframes)
{
    m_linframes = _linframes;
}

/*!
 * @brief This function moves the value in member linframes
 * @param _linframes New value to be moved in member linframes
 */
void linFrames::linframes(
        std::vector<linFrame>&& _linframes)
{
    m_linframes = std::move(_linframes);
}

/*!
 * @brief This function returns a constant reference to member linframes
 * @return Constant reference to member linframes
 */
const std::vector<linFrame>& linFrames::linframes() const
{
    return m_linframes;
}

/*!
 * @brief This function returns a reference to member linframes
 * @return Reference to member linframes
 */
std::vector<linFrame>& linFrames::linframes()
{
    return m_linframes;
}




linMessage::linMessage()
{
}

linMessage::~linMessage()
{
}

linMessage::linMessage(
        const linMessage& x)
{
    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_data = x.m_data;
    m_dataParser = x.m_dataParser;
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_errorCode = x.m_errorCode;
    m_NMstate = x.m_NMstate;
    m_isMasterFrame = x.m_isMasterFrame;
}

linMessage::linMessage(
        linMessage&& x) noexcept
{
    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_data = std::move(x.m_data);
    m_dataParser = std::move(x.m_dataParser);
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_errorCode = x.m_errorCode;
    m_NMstate = x.m_NMstate;
    m_isMasterFrame = x.m_isMasterFrame;
}

linMessage& linMessage::operator =(
        const linMessage& x)
{

    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_data = x.m_data;
    m_dataParser = x.m_dataParser;
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_errorCode = x.m_errorCode;
    m_NMstate = x.m_NMstate;
    m_isMasterFrame = x.m_isMasterFrame;
    return *this;
}

linMessage& linMessage::operator =(
        linMessage&& x) noexcept
{

    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_data = std::move(x.m_data);
    m_dataParser = std::move(x.m_dataParser);
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_errorCode = x.m_errorCode;
    m_NMstate = x.m_NMstate;
    m_isMasterFrame = x.m_isMasterFrame;
    return *this;
}

bool linMessage::operator ==(
        const linMessage& x) const
{
    return (m_channel == x.m_channel &&
           m_id == x.m_id &&
           m_dlc == x.m_dlc &&
           m_data == x.m_data &&
           m_dataParser == x.m_dataParser &&
           m_flags == x.m_flags &&
           m_timeStamp == x.m_timeStamp &&
           m_timeStamp_d == x.m_timeStamp_d &&
           m_rxtx == x.m_rxtx &&
           m_errorCode == x.m_errorCode &&
           m_NMstate == x.m_NMstate &&
           m_isMasterFrame == x.m_isMasterFrame);
}

bool linMessage::operator !=(
        const linMessage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member channel
 * @param _channel New value for member channel
 */
void linMessage::channel(
        uint32_t _channel)
{
    m_channel = _channel;
}

/*!
 * @brief This function returns the value of member channel
 * @return Value of member channel
 */
uint32_t linMessage::channel() const
{
    return m_channel;
}

/*!
 * @brief This function returns a reference to member channel
 * @return Reference to member channel
 */
uint32_t& linMessage::channel()
{
    return m_channel;
}


/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void linMessage::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t linMessage::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& linMessage::id()
{
    return m_id;
}


/*!
 * @brief This function sets a value in member dlc
 * @param _dlc New value for member dlc
 */
void linMessage::dlc(
        uint8_t _dlc)
{
    m_dlc = _dlc;
}

/*!
 * @brief This function returns the value of member dlc
 * @return Value of member dlc
 */
uint8_t linMessage::dlc() const
{
    return m_dlc;
}

/*!
 * @brief This function returns a reference to member dlc
 * @return Reference to member dlc
 */
uint8_t& linMessage::dlc()
{
    return m_dlc;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void linMessage::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void linMessage::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& linMessage::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& linMessage::data()
{
    return m_data;
}


/*!
 * @brief This function copies the value in member dataParser
 * @param _dataParser New value to be copied in member dataParser
 */
void linMessage::dataParser(
        const std::vector<uint8_t>& _dataParser)
{
    m_dataParser = _dataParser;
}

/*!
 * @brief This function moves the value in member dataParser
 * @param _dataParser New value to be moved in member dataParser
 */
void linMessage::dataParser(
        std::vector<uint8_t>&& _dataParser)
{
    m_dataParser = std::move(_dataParser);
}

/*!
 * @brief This function returns a constant reference to member dataParser
 * @return Constant reference to member dataParser
 */
const std::vector<uint8_t>& linMessage::dataParser() const
{
    return m_dataParser;
}

/*!
 * @brief This function returns a reference to member dataParser
 * @return Reference to member dataParser
 */
std::vector<uint8_t>& linMessage::dataParser()
{
    return m_dataParser;
}


/*!
 * @brief This function sets a value in member flags
 * @param _flags New value for member flags
 */
void linMessage::flags(
        uint16_t _flags)
{
    m_flags = _flags;
}

/*!
 * @brief This function returns the value of member flags
 * @return Value of member flags
 */
uint16_t linMessage::flags() const
{
    return m_flags;
}

/*!
 * @brief This function returns a reference to member flags
 * @return Reference to member flags
 */
uint16_t& linMessage::flags()
{
    return m_flags;
}


/*!
 * @brief This function sets a value in member timeStamp
 * @param _timeStamp New value for member timeStamp
 */
void linMessage::timeStamp(
        uint64_t _timeStamp)
{
    m_timeStamp = _timeStamp;
}

/*!
 * @brief This function returns the value of member timeStamp
 * @return Value of member timeStamp
 */
uint64_t linMessage::timeStamp() const
{
    return m_timeStamp;
}

/*!
 * @brief This function returns a reference to member timeStamp
 * @return Reference to member timeStamp
 */
uint64_t& linMessage::timeStamp()
{
    return m_timeStamp;
}


/*!
 * @brief This function sets a value in member timeStamp_d
 * @param _timeStamp_d New value for member timeStamp_d
 */
void linMessage::timeStamp_d(
        int64_t _timeStamp_d)
{
    m_timeStamp_d = _timeStamp_d;
}

/*!
 * @brief This function returns the value of member timeStamp_d
 * @return Value of member timeStamp_d
 */
int64_t linMessage::timeStamp_d() const
{
    return m_timeStamp_d;
}

/*!
 * @brief This function returns a reference to member timeStamp_d
 * @return Reference to member timeStamp_d
 */
int64_t& linMessage::timeStamp_d()
{
    return m_timeStamp_d;
}


/*!
 * @brief This function sets a value in member rxtx
 * @param _rxtx New value for member rxtx
 */
void linMessage::rxtx(
        uint8_t _rxtx)
{
    m_rxtx = _rxtx;
}

/*!
 * @brief This function returns the value of member rxtx
 * @return Value of member rxtx
 */
uint8_t linMessage::rxtx() const
{
    return m_rxtx;
}

/*!
 * @brief This function returns a reference to member rxtx
 * @return Reference to member rxtx
 */
uint8_t& linMessage::rxtx()
{
    return m_rxtx;
}


/*!
 * @brief This function sets a value in member errorCode
 * @param _errorCode New value for member errorCode
 */
void linMessage::errorCode(
        uint8_t _errorCode)
{
    m_errorCode = _errorCode;
}

/*!
 * @brief This function returns the value of member errorCode
 * @return Value of member errorCode
 */
uint8_t linMessage::errorCode() const
{
    return m_errorCode;
}

/*!
 * @brief This function returns a reference to member errorCode
 * @return Reference to member errorCode
 */
uint8_t& linMessage::errorCode()
{
    return m_errorCode;
}


/*!
 * @brief This function sets a value in member NMstate
 * @param _NMstate New value for member NMstate
 */
void linMessage::NMstate(
        uint8_t _NMstate)
{
    m_NMstate = _NMstate;
}

/*!
 * @brief This function returns the value of member NMstate
 * @return Value of member NMstate
 */
uint8_t linMessage::NMstate() const
{
    return m_NMstate;
}

/*!
 * @brief This function returns a reference to member NMstate
 * @return Reference to member NMstate
 */
uint8_t& linMessage::NMstate()
{
    return m_NMstate;
}


/*!
 * @brief This function sets a value in member isMasterFrame
 * @param _isMasterFrame New value for member isMasterFrame
 */
void linMessage::isMasterFrame(
        uint8_t _isMasterFrame)
{
    m_isMasterFrame = _isMasterFrame;
}

/*!
 * @brief This function returns the value of member isMasterFrame
 * @return Value of member isMasterFrame
 */
uint8_t linMessage::isMasterFrame() const
{
    return m_isMasterFrame;
}

/*!
 * @brief This function returns a reference to member isMasterFrame
 * @return Reference to member isMasterFrame
 */
uint8_t& linMessage::isMasterFrame()
{
    return m_isMasterFrame;
}






linMessages::linMessages()
{
}

linMessages::~linMessages()
{
}

linMessages::linMessages(
        const linMessages& x)
{
    m_len = x.m_len;
    m_linMsgs = x.m_linMsgs;
}

linMessages::linMessages(
        linMessages&& x) noexcept
{
    m_len = x.m_len;
    m_linMsgs = std::move(x.m_linMsgs);
}

linMessages& linMessages::operator =(
        const linMessages& x)
{

    m_len = x.m_len;
    m_linMsgs = x.m_linMsgs;
    return *this;
}

linMessages& linMessages::operator =(
        linMessages&& x) noexcept
{

    m_len = x.m_len;
    m_linMsgs = std::move(x.m_linMsgs);
    return *this;
}

bool linMessages::operator ==(
        const linMessages& x) const
{
    return (m_len == x.m_len &&
           m_linMsgs == x.m_linMsgs);
}

bool linMessages::operator !=(
        const linMessages& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member len
 * @param _len New value for member len
 */
void linMessages::len(
        uint64_t _len)
{
    m_len = _len;
}

/*!
 * @brief This function returns the value of member len
 * @return Value of member len
 */
uint64_t linMessages::len() const
{
    return m_len;
}

/*!
 * @brief This function returns a reference to member len
 * @return Reference to member len
 */
uint64_t& linMessages::len()
{
    return m_len;
}


/*!
 * @brief This function copies the value in member linMsgs
 * @param _linMsgs New value to be copied in member linMsgs
 */
void linMessages::linMsgs(
        const std::vector<linMessage>& _linMsgs)
{
    m_linMsgs = _linMsgs;
}

/*!
 * @brief This function moves the value in member linMsgs
 * @param _linMsgs New value to be moved in member linMsgs
 */
void linMessages::linMsgs(
        std::vector<linMessage>&& _linMsgs)
{
    m_linMsgs = std::move(_linMsgs);
}

/*!
 * @brief This function returns a constant reference to member linMsgs
 * @return Constant reference to member linMsgs
 */
const std::vector<linMessage>& linMessages::linMsgs() const
{
    return m_linMsgs;
}

/*!
 * @brief This function returns a reference to member linMsgs
 * @return Reference to member linMsgs
 */
std::vector<linMessage>& linMessages::linMsgs()
{
    return m_linMsgs;
}




someipFrame::someipFrame()
{
}

someipFrame::~someipFrame()
{
}

someipFrame::someipFrame(
        const someipFrame& x)
{
    m_proto = x.m_proto;
    m_timeStamp = x.m_timeStamp;
    m_src_ip = x.m_src_ip;
    m_src_port = x.m_src_port;
    m_dest_ip = x.m_dest_ip;
    m_dest_port = x.m_dest_port;
    m_if_type = x.m_if_type;
    m_srv_id = x.m_srv_id;
    m_srv_name = x.m_srv_name;
    m_inst_id = x.m_inst_id;
    m_if_id = x.m_if_id;
    m_if_name = x.m_if_name;
    m_msg_type = x.m_msg_type;
    m_session_id = x.m_session_id;
    m_payload = x.m_payload;
    m_context_dict = x.m_context_dict;
    m_dir = x.m_dir;
    m_children = x.m_children;
    m_ret_code = x.m_ret_code;
    m_channel = x.m_channel;
    m_delta_time = x.m_delta_time;
}

someipFrame::someipFrame(
        someipFrame&& x) noexcept
{
    m_proto = std::move(x.m_proto);
    m_timeStamp = x.m_timeStamp;
    m_src_ip = std::move(x.m_src_ip);
    m_src_port = x.m_src_port;
    m_dest_ip = std::move(x.m_dest_ip);
    m_dest_port = x.m_dest_port;
    m_if_type = std::move(x.m_if_type);
    m_srv_id = x.m_srv_id;
    m_srv_name = std::move(x.m_srv_name);
    m_inst_id = x.m_inst_id;
    m_if_id = x.m_if_id;
    m_if_name = std::move(x.m_if_name);
    m_msg_type = x.m_msg_type;
    m_session_id = x.m_session_id;
    m_payload = std::move(x.m_payload);
    m_context_dict = std::move(x.m_context_dict);
    m_dir = std::move(x.m_dir);
    m_children = std::move(x.m_children);
    m_ret_code = x.m_ret_code;
    m_channel = x.m_channel;
    m_delta_time = x.m_delta_time;
}

someipFrame& someipFrame::operator =(
        const someipFrame& x)
{

    m_proto = x.m_proto;
    m_timeStamp = x.m_timeStamp;
    m_src_ip = x.m_src_ip;
    m_src_port = x.m_src_port;
    m_dest_ip = x.m_dest_ip;
    m_dest_port = x.m_dest_port;
    m_if_type = x.m_if_type;
    m_srv_id = x.m_srv_id;
    m_srv_name = x.m_srv_name;
    m_inst_id = x.m_inst_id;
    m_if_id = x.m_if_id;
    m_if_name = x.m_if_name;
    m_msg_type = x.m_msg_type;
    m_session_id = x.m_session_id;
    m_payload = x.m_payload;
    m_context_dict = x.m_context_dict;
    m_dir = x.m_dir;
    m_children = x.m_children;
    m_ret_code = x.m_ret_code;
    m_channel = x.m_channel;
    m_delta_time = x.m_delta_time;
    return *this;
}

someipFrame& someipFrame::operator =(
        someipFrame&& x) noexcept
{

    m_proto = std::move(x.m_proto);
    m_timeStamp = x.m_timeStamp;
    m_src_ip = std::move(x.m_src_ip);
    m_src_port = x.m_src_port;
    m_dest_ip = std::move(x.m_dest_ip);
    m_dest_port = x.m_dest_port;
    m_if_type = std::move(x.m_if_type);
    m_srv_id = x.m_srv_id;
    m_srv_name = std::move(x.m_srv_name);
    m_inst_id = x.m_inst_id;
    m_if_id = x.m_if_id;
    m_if_name = std::move(x.m_if_name);
    m_msg_type = x.m_msg_type;
    m_session_id = x.m_session_id;
    m_payload = std::move(x.m_payload);
    m_context_dict = std::move(x.m_context_dict);
    m_dir = std::move(x.m_dir);
    m_children = std::move(x.m_children);
    m_ret_code = x.m_ret_code;
    m_channel = x.m_channel;
    m_delta_time = x.m_delta_time;
    return *this;
}

bool someipFrame::operator ==(
        const someipFrame& x) const
{
    return (m_proto == x.m_proto &&
           m_timeStamp == x.m_timeStamp &&
           m_src_ip == x.m_src_ip &&
           m_src_port == x.m_src_port &&
           m_dest_ip == x.m_dest_ip &&
           m_dest_port == x.m_dest_port &&
           m_if_type == x.m_if_type &&
           m_srv_id == x.m_srv_id &&
           m_srv_name == x.m_srv_name &&
           m_inst_id == x.m_inst_id &&
           m_if_id == x.m_if_id &&
           m_if_name == x.m_if_name &&
           m_msg_type == x.m_msg_type &&
           m_session_id == x.m_session_id &&
           m_payload == x.m_payload &&
           m_context_dict == x.m_context_dict &&
           m_dir == x.m_dir &&
           m_children == x.m_children &&
           m_ret_code == x.m_ret_code &&
           m_channel == x.m_channel &&
           m_delta_time == x.m_delta_time);
}

bool someipFrame::operator !=(
        const someipFrame& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member proto
 * @param _proto New value to be copied in member proto
 */
void someipFrame::proto(
        const std::string& _proto)
{
    m_proto = _proto;
}

/*!
 * @brief This function moves the value in member proto
 * @param _proto New value to be moved in member proto
 */
void someipFrame::proto(
        std::string&& _proto)
{
    m_proto = std::move(_proto);
}

/*!
 * @brief This function returns a constant reference to member proto
 * @return Constant reference to member proto
 */
const std::string& someipFrame::proto() const
{
    return m_proto;
}

/*!
 * @brief This function returns a reference to member proto
 * @return Reference to member proto
 */
std::string& someipFrame::proto()
{
    return m_proto;
}


/*!
 * @brief This function sets a value in member timeStamp
 * @param _timeStamp New value for member timeStamp
 */
void someipFrame::timeStamp(
        uint64_t _timeStamp)
{
    m_timeStamp = _timeStamp;
}

/*!
 * @brief This function returns the value of member timeStamp
 * @return Value of member timeStamp
 */
uint64_t someipFrame::timeStamp() const
{
    return m_timeStamp;
}

/*!
 * @brief This function returns a reference to member timeStamp
 * @return Reference to member timeStamp
 */
uint64_t& someipFrame::timeStamp()
{
    return m_timeStamp;
}


/*!
 * @brief This function copies the value in member src_ip
 * @param _src_ip New value to be copied in member src_ip
 */
void someipFrame::src_ip(
        const std::string& _src_ip)
{
    m_src_ip = _src_ip;
}

/*!
 * @brief This function moves the value in member src_ip
 * @param _src_ip New value to be moved in member src_ip
 */
void someipFrame::src_ip(
        std::string&& _src_ip)
{
    m_src_ip = std::move(_src_ip);
}

/*!
 * @brief This function returns a constant reference to member src_ip
 * @return Constant reference to member src_ip
 */
const std::string& someipFrame::src_ip() const
{
    return m_src_ip;
}

/*!
 * @brief This function returns a reference to member src_ip
 * @return Reference to member src_ip
 */
std::string& someipFrame::src_ip()
{
    return m_src_ip;
}


/*!
 * @brief This function sets a value in member src_port
 * @param _src_port New value for member src_port
 */
void someipFrame::src_port(
        uint32_t _src_port)
{
    m_src_port = _src_port;
}

/*!
 * @brief This function returns the value of member src_port
 * @return Value of member src_port
 */
uint32_t someipFrame::src_port() const
{
    return m_src_port;
}

/*!
 * @brief This function returns a reference to member src_port
 * @return Reference to member src_port
 */
uint32_t& someipFrame::src_port()
{
    return m_src_port;
}


/*!
 * @brief This function copies the value in member dest_ip
 * @param _dest_ip New value to be copied in member dest_ip
 */
void someipFrame::dest_ip(
        const std::string& _dest_ip)
{
    m_dest_ip = _dest_ip;
}

/*!
 * @brief This function moves the value in member dest_ip
 * @param _dest_ip New value to be moved in member dest_ip
 */
void someipFrame::dest_ip(
        std::string&& _dest_ip)
{
    m_dest_ip = std::move(_dest_ip);
}

/*!
 * @brief This function returns a constant reference to member dest_ip
 * @return Constant reference to member dest_ip
 */
const std::string& someipFrame::dest_ip() const
{
    return m_dest_ip;
}

/*!
 * @brief This function returns a reference to member dest_ip
 * @return Reference to member dest_ip
 */
std::string& someipFrame::dest_ip()
{
    return m_dest_ip;
}


/*!
 * @brief This function sets a value in member dest_port
 * @param _dest_port New value for member dest_port
 */
void someipFrame::dest_port(
        uint32_t _dest_port)
{
    m_dest_port = _dest_port;
}

/*!
 * @brief This function returns the value of member dest_port
 * @return Value of member dest_port
 */
uint32_t someipFrame::dest_port() const
{
    return m_dest_port;
}

/*!
 * @brief This function returns a reference to member dest_port
 * @return Reference to member dest_port
 */
uint32_t& someipFrame::dest_port()
{
    return m_dest_port;
}


/*!
 * @brief This function copies the value in member if_type
 * @param _if_type New value to be copied in member if_type
 */
void someipFrame::if_type(
        const std::string& _if_type)
{
    m_if_type = _if_type;
}

/*!
 * @brief This function moves the value in member if_type
 * @param _if_type New value to be moved in member if_type
 */
void someipFrame::if_type(
        std::string&& _if_type)
{
    m_if_type = std::move(_if_type);
}

/*!
 * @brief This function returns a constant reference to member if_type
 * @return Constant reference to member if_type
 */
const std::string& someipFrame::if_type() const
{
    return m_if_type;
}

/*!
 * @brief This function returns a reference to member if_type
 * @return Reference to member if_type
 */
std::string& someipFrame::if_type()
{
    return m_if_type;
}


/*!
 * @brief This function sets a value in member srv_id
 * @param _srv_id New value for member srv_id
 */
void someipFrame::srv_id(
        uint32_t _srv_id)
{
    m_srv_id = _srv_id;
}

/*!
 * @brief This function returns the value of member srv_id
 * @return Value of member srv_id
 */
uint32_t someipFrame::srv_id() const
{
    return m_srv_id;
}

/*!
 * @brief This function returns a reference to member srv_id
 * @return Reference to member srv_id
 */
uint32_t& someipFrame::srv_id()
{
    return m_srv_id;
}


/*!
 * @brief This function copies the value in member srv_name
 * @param _srv_name New value to be copied in member srv_name
 */
void someipFrame::srv_name(
        const std::string& _srv_name)
{
    m_srv_name = _srv_name;
}

/*!
 * @brief This function moves the value in member srv_name
 * @param _srv_name New value to be moved in member srv_name
 */
void someipFrame::srv_name(
        std::string&& _srv_name)
{
    m_srv_name = std::move(_srv_name);
}

/*!
 * @brief This function returns a constant reference to member srv_name
 * @return Constant reference to member srv_name
 */
const std::string& someipFrame::srv_name() const
{
    return m_srv_name;
}

/*!
 * @brief This function returns a reference to member srv_name
 * @return Reference to member srv_name
 */
std::string& someipFrame::srv_name()
{
    return m_srv_name;
}


/*!
 * @brief This function sets a value in member inst_id
 * @param _inst_id New value for member inst_id
 */
void someipFrame::inst_id(
        uint32_t _inst_id)
{
    m_inst_id = _inst_id;
}

/*!
 * @brief This function returns the value of member inst_id
 * @return Value of member inst_id
 */
uint32_t someipFrame::inst_id() const
{
    return m_inst_id;
}

/*!
 * @brief This function returns a reference to member inst_id
 * @return Reference to member inst_id
 */
uint32_t& someipFrame::inst_id()
{
    return m_inst_id;
}


/*!
 * @brief This function sets a value in member if_id
 * @param _if_id New value for member if_id
 */
void someipFrame::if_id(
        uint32_t _if_id)
{
    m_if_id = _if_id;
}

/*!
 * @brief This function returns the value of member if_id
 * @return Value of member if_id
 */
uint32_t someipFrame::if_id() const
{
    return m_if_id;
}

/*!
 * @brief This function returns a reference to member if_id
 * @return Reference to member if_id
 */
uint32_t& someipFrame::if_id()
{
    return m_if_id;
}


/*!
 * @brief This function copies the value in member if_name
 * @param _if_name New value to be copied in member if_name
 */
void someipFrame::if_name(
        const std::string& _if_name)
{
    m_if_name = _if_name;
}

/*!
 * @brief This function moves the value in member if_name
 * @param _if_name New value to be moved in member if_name
 */
void someipFrame::if_name(
        std::string&& _if_name)
{
    m_if_name = std::move(_if_name);
}

/*!
 * @brief This function returns a constant reference to member if_name
 * @return Constant reference to member if_name
 */
const std::string& someipFrame::if_name() const
{
    return m_if_name;
}

/*!
 * @brief This function returns a reference to member if_name
 * @return Reference to member if_name
 */
std::string& someipFrame::if_name()
{
    return m_if_name;
}


/*!
 * @brief This function sets a value in member msg_type
 * @param _msg_type New value for member msg_type
 */
void someipFrame::msg_type(
        uint16_t _msg_type)
{
    m_msg_type = _msg_type;
}

/*!
 * @brief This function returns the value of member msg_type
 * @return Value of member msg_type
 */
uint16_t someipFrame::msg_type() const
{
    return m_msg_type;
}

/*!
 * @brief This function returns a reference to member msg_type
 * @return Reference to member msg_type
 */
uint16_t& someipFrame::msg_type()
{
    return m_msg_type;
}


/*!
 * @brief This function sets a value in member session_id
 * @param _session_id New value for member session_id
 */
void someipFrame::session_id(
        uint32_t _session_id)
{
    m_session_id = _session_id;
}

/*!
 * @brief This function returns the value of member session_id
 * @return Value of member session_id
 */
uint32_t someipFrame::session_id() const
{
    return m_session_id;
}

/*!
 * @brief This function returns a reference to member session_id
 * @return Reference to member session_id
 */
uint32_t& someipFrame::session_id()
{
    return m_session_id;
}


/*!
 * @brief This function copies the value in member payload
 * @param _payload New value to be copied in member payload
 */
void someipFrame::payload(
        const std::vector<uint8_t>& _payload)
{
    m_payload = _payload;
}

/*!
 * @brief This function moves the value in member payload
 * @param _payload New value to be moved in member payload
 */
void someipFrame::payload(
        std::vector<uint8_t>&& _payload)
{
    m_payload = std::move(_payload);
}

/*!
 * @brief This function returns a constant reference to member payload
 * @return Constant reference to member payload
 */
const std::vector<uint8_t>& someipFrame::payload() const
{
    return m_payload;
}

/*!
 * @brief This function returns a reference to member payload
 * @return Reference to member payload
 */
std::vector<uint8_t>& someipFrame::payload()
{
    return m_payload;
}


/*!
 * @brief This function copies the value in member context_dict
 * @param _context_dict New value to be copied in member context_dict
 */
void someipFrame::context_dict(
        const std::string& _context_dict)
{
    m_context_dict = _context_dict;
}

/*!
 * @brief This function moves the value in member context_dict
 * @param _context_dict New value to be moved in member context_dict
 */
void someipFrame::context_dict(
        std::string&& _context_dict)
{
    m_context_dict = std::move(_context_dict);
}

/*!
 * @brief This function returns a constant reference to member context_dict
 * @return Constant reference to member context_dict
 */
const std::string& someipFrame::context_dict() const
{
    return m_context_dict;
}

/*!
 * @brief This function returns a reference to member context_dict
 * @return Reference to member context_dict
 */
std::string& someipFrame::context_dict()
{
    return m_context_dict;
}


/*!
 * @brief This function copies the value in member dir
 * @param _dir New value to be copied in member dir
 */
void someipFrame::dir(
        const std::string& _dir)
{
    m_dir = _dir;
}

/*!
 * @brief This function moves the value in member dir
 * @param _dir New value to be moved in member dir
 */
void someipFrame::dir(
        std::string&& _dir)
{
    m_dir = std::move(_dir);
}

/*!
 * @brief This function returns a constant reference to member dir
 * @return Constant reference to member dir
 */
const std::string& someipFrame::dir() const
{
    return m_dir;
}

/*!
 * @brief This function returns a reference to member dir
 * @return Reference to member dir
 */
std::string& someipFrame::dir()
{
    return m_dir;
}


/*!
 * @brief This function copies the value in member children
 * @param _children New value to be copied in member children
 */
void someipFrame::children(
        const std::string& _children)
{
    m_children = _children;
}

/*!
 * @brief This function moves the value in member children
 * @param _children New value to be moved in member children
 */
void someipFrame::children(
        std::string&& _children)
{
    m_children = std::move(_children);
}

/*!
 * @brief This function returns a constant reference to member children
 * @return Constant reference to member children
 */
const std::string& someipFrame::children() const
{
    return m_children;
}

/*!
 * @brief This function returns a reference to member children
 * @return Reference to member children
 */
std::string& someipFrame::children()
{
    return m_children;
}


/*!
 * @brief This function sets a value in member ret_code
 * @param _ret_code New value for member ret_code
 */
void someipFrame::ret_code(
        uint16_t _ret_code)
{
    m_ret_code = _ret_code;
}

/*!
 * @brief This function returns the value of member ret_code
 * @return Value of member ret_code
 */
uint16_t someipFrame::ret_code() const
{
    return m_ret_code;
}

/*!
 * @brief This function returns a reference to member ret_code
 * @return Reference to member ret_code
 */
uint16_t& someipFrame::ret_code()
{
    return m_ret_code;
}


/*!
 * @brief This function sets a value in member channel
 * @param _channel New value for member channel
 */
void someipFrame::channel(
        uint32_t _channel)
{
    m_channel = _channel;
}

/*!
 * @brief This function returns the value of member channel
 * @return Value of member channel
 */
uint32_t someipFrame::channel() const
{
    return m_channel;
}

/*!
 * @brief This function returns a reference to member channel
 * @return Reference to member channel
 */
uint32_t& someipFrame::channel()
{
    return m_channel;
}


/*!
 * @brief This function sets a value in member delta_time
 * @param _delta_time New value for member delta_time
 */
void someipFrame::delta_time(
        uint64_t _delta_time)
{
    m_delta_time = _delta_time;
}

/*!
 * @brief This function returns the value of member delta_time
 * @return Value of member delta_time
 */
uint64_t someipFrame::delta_time() const
{
    return m_delta_time;
}

/*!
 * @brief This function returns a reference to member delta_time
 * @return Reference to member delta_time
 */
uint64_t& someipFrame::delta_time()
{
    return m_delta_time;
}




sdFrame::sdFrame()
{
}

sdFrame::~sdFrame()
{
}

sdFrame::sdFrame(
        const sdFrame& x)
{
    m_proto = x.m_proto;
    m_timeStamp = x.m_timeStamp;
    m_src_ip = x.m_src_ip;
    m_src_port = x.m_src_port;
    m_dest_ip = x.m_dest_ip;
    m_dest_port = x.m_dest_port;
    m_data = x.m_data;
    m_children = x.m_children;
    m_dir = x.m_dir;
    m_channel = x.m_channel;
}

sdFrame::sdFrame(
        sdFrame&& x) noexcept
{
    m_proto = std::move(x.m_proto);
    m_timeStamp = x.m_timeStamp;
    m_src_ip = std::move(x.m_src_ip);
    m_src_port = x.m_src_port;
    m_dest_ip = std::move(x.m_dest_ip);
    m_dest_port = x.m_dest_port;
    m_data = std::move(x.m_data);
    m_children = std::move(x.m_children);
    m_dir = std::move(x.m_dir);
    m_channel = x.m_channel;
}

sdFrame& sdFrame::operator =(
        const sdFrame& x)
{

    m_proto = x.m_proto;
    m_timeStamp = x.m_timeStamp;
    m_src_ip = x.m_src_ip;
    m_src_port = x.m_src_port;
    m_dest_ip = x.m_dest_ip;
    m_dest_port = x.m_dest_port;
    m_data = x.m_data;
    m_children = x.m_children;
    m_dir = x.m_dir;
    m_channel = x.m_channel;
    return *this;
}

sdFrame& sdFrame::operator =(
        sdFrame&& x) noexcept
{

    m_proto = std::move(x.m_proto);
    m_timeStamp = x.m_timeStamp;
    m_src_ip = std::move(x.m_src_ip);
    m_src_port = x.m_src_port;
    m_dest_ip = std::move(x.m_dest_ip);
    m_dest_port = x.m_dest_port;
    m_data = std::move(x.m_data);
    m_children = std::move(x.m_children);
    m_dir = std::move(x.m_dir);
    m_channel = x.m_channel;
    return *this;
}

bool sdFrame::operator ==(
        const sdFrame& x) const
{
    return (m_proto == x.m_proto &&
           m_timeStamp == x.m_timeStamp &&
           m_src_ip == x.m_src_ip &&
           m_src_port == x.m_src_port &&
           m_dest_ip == x.m_dest_ip &&
           m_dest_port == x.m_dest_port &&
           m_data == x.m_data &&
           m_children == x.m_children &&
           m_dir == x.m_dir &&
           m_channel == x.m_channel);
}

bool sdFrame::operator !=(
        const sdFrame& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member proto
 * @param _proto New value to be copied in member proto
 */
void sdFrame::proto(
        const std::string& _proto)
{
    m_proto = _proto;
}

/*!
 * @brief This function moves the value in member proto
 * @param _proto New value to be moved in member proto
 */
void sdFrame::proto(
        std::string&& _proto)
{
    m_proto = std::move(_proto);
}

/*!
 * @brief This function returns a constant reference to member proto
 * @return Constant reference to member proto
 */
const std::string& sdFrame::proto() const
{
    return m_proto;
}

/*!
 * @brief This function returns a reference to member proto
 * @return Reference to member proto
 */
std::string& sdFrame::proto()
{
    return m_proto;
}


/*!
 * @brief This function sets a value in member timeStamp
 * @param _timeStamp New value for member timeStamp
 */
void sdFrame::timeStamp(
        uint64_t _timeStamp)
{
    m_timeStamp = _timeStamp;
}

/*!
 * @brief This function returns the value of member timeStamp
 * @return Value of member timeStamp
 */
uint64_t sdFrame::timeStamp() const
{
    return m_timeStamp;
}

/*!
 * @brief This function returns a reference to member timeStamp
 * @return Reference to member timeStamp
 */
uint64_t& sdFrame::timeStamp()
{
    return m_timeStamp;
}


/*!
 * @brief This function copies the value in member src_ip
 * @param _src_ip New value to be copied in member src_ip
 */
void sdFrame::src_ip(
        const std::string& _src_ip)
{
    m_src_ip = _src_ip;
}

/*!
 * @brief This function moves the value in member src_ip
 * @param _src_ip New value to be moved in member src_ip
 */
void sdFrame::src_ip(
        std::string&& _src_ip)
{
    m_src_ip = std::move(_src_ip);
}

/*!
 * @brief This function returns a constant reference to member src_ip
 * @return Constant reference to member src_ip
 */
const std::string& sdFrame::src_ip() const
{
    return m_src_ip;
}

/*!
 * @brief This function returns a reference to member src_ip
 * @return Reference to member src_ip
 */
std::string& sdFrame::src_ip()
{
    return m_src_ip;
}


/*!
 * @brief This function sets a value in member src_port
 * @param _src_port New value for member src_port
 */
void sdFrame::src_port(
        uint32_t _src_port)
{
    m_src_port = _src_port;
}

/*!
 * @brief This function returns the value of member src_port
 * @return Value of member src_port
 */
uint32_t sdFrame::src_port() const
{
    return m_src_port;
}

/*!
 * @brief This function returns a reference to member src_port
 * @return Reference to member src_port
 */
uint32_t& sdFrame::src_port()
{
    return m_src_port;
}


/*!
 * @brief This function copies the value in member dest_ip
 * @param _dest_ip New value to be copied in member dest_ip
 */
void sdFrame::dest_ip(
        const std::string& _dest_ip)
{
    m_dest_ip = _dest_ip;
}

/*!
 * @brief This function moves the value in member dest_ip
 * @param _dest_ip New value to be moved in member dest_ip
 */
void sdFrame::dest_ip(
        std::string&& _dest_ip)
{
    m_dest_ip = std::move(_dest_ip);
}

/*!
 * @brief This function returns a constant reference to member dest_ip
 * @return Constant reference to member dest_ip
 */
const std::string& sdFrame::dest_ip() const
{
    return m_dest_ip;
}

/*!
 * @brief This function returns a reference to member dest_ip
 * @return Reference to member dest_ip
 */
std::string& sdFrame::dest_ip()
{
    return m_dest_ip;
}


/*!
 * @brief This function sets a value in member dest_port
 * @param _dest_port New value for member dest_port
 */
void sdFrame::dest_port(
        uint32_t _dest_port)
{
    m_dest_port = _dest_port;
}

/*!
 * @brief This function returns the value of member dest_port
 * @return Value of member dest_port
 */
uint32_t sdFrame::dest_port() const
{
    return m_dest_port;
}

/*!
 * @brief This function returns a reference to member dest_port
 * @return Reference to member dest_port
 */
uint32_t& sdFrame::dest_port()
{
    return m_dest_port;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void sdFrame::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void sdFrame::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& sdFrame::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& sdFrame::data()
{
    return m_data;
}


/*!
 * @brief This function copies the value in member children
 * @param _children New value to be copied in member children
 */
void sdFrame::children(
        const std::string& _children)
{
    m_children = _children;
}

/*!
 * @brief This function moves the value in member children
 * @param _children New value to be moved in member children
 */
void sdFrame::children(
        std::string&& _children)
{
    m_children = std::move(_children);
}

/*!
 * @brief This function returns a constant reference to member children
 * @return Constant reference to member children
 */
const std::string& sdFrame::children() const
{
    return m_children;
}

/*!
 * @brief This function returns a reference to member children
 * @return Reference to member children
 */
std::string& sdFrame::children()
{
    return m_children;
}


/*!
 * @brief This function copies the value in member dir
 * @param _dir New value to be copied in member dir
 */
void sdFrame::dir(
        const std::string& _dir)
{
    m_dir = _dir;
}

/*!
 * @brief This function moves the value in member dir
 * @param _dir New value to be moved in member dir
 */
void sdFrame::dir(
        std::string&& _dir)
{
    m_dir = std::move(_dir);
}

/*!
 * @brief This function returns a constant reference to member dir
 * @return Constant reference to member dir
 */
const std::string& sdFrame::dir() const
{
    return m_dir;
}

/*!
 * @brief This function returns a reference to member dir
 * @return Reference to member dir
 */
std::string& sdFrame::dir()
{
    return m_dir;
}


/*!
 * @brief This function sets a value in member channel
 * @param _channel New value for member channel
 */
void sdFrame::channel(
        uint32_t _channel)
{
    m_channel = _channel;
}

/*!
 * @brief This function returns the value of member channel
 * @return Value of member channel
 */
uint32_t sdFrame::channel() const
{
    return m_channel;
}

/*!
 * @brief This function returns a reference to member channel
 * @return Reference to member channel
 */
uint32_t& sdFrame::channel()
{
    return m_channel;
}




someipStateInfo::someipStateInfo()
{
}

someipStateInfo::~someipStateInfo()
{
}

someipStateInfo::someipStateInfo(
        const someipStateInfo& x)
{
    m_timeStamp = x.m_timeStamp;
    m_srv_id = x.m_srv_id;
    m_inst_id = x.m_inst_id;
    m_state = x.m_state;
    m_channel = x.m_channel;
}

someipStateInfo::someipStateInfo(
        someipStateInfo&& x) noexcept
{
    m_timeStamp = x.m_timeStamp;
    m_srv_id = x.m_srv_id;
    m_inst_id = x.m_inst_id;
    m_state = x.m_state;
    m_channel = x.m_channel;
}

someipStateInfo& someipStateInfo::operator =(
        const someipStateInfo& x)
{

    m_timeStamp = x.m_timeStamp;
    m_srv_id = x.m_srv_id;
    m_inst_id = x.m_inst_id;
    m_state = x.m_state;
    m_channel = x.m_channel;
    return *this;
}

someipStateInfo& someipStateInfo::operator =(
        someipStateInfo&& x) noexcept
{

    m_timeStamp = x.m_timeStamp;
    m_srv_id = x.m_srv_id;
    m_inst_id = x.m_inst_id;
    m_state = x.m_state;
    m_channel = x.m_channel;
    return *this;
}

bool someipStateInfo::operator ==(
        const someipStateInfo& x) const
{
    return (m_timeStamp == x.m_timeStamp &&
           m_srv_id == x.m_srv_id &&
           m_inst_id == x.m_inst_id &&
           m_state == x.m_state &&
           m_channel == x.m_channel);
}

bool someipStateInfo::operator !=(
        const someipStateInfo& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member timeStamp
 * @param _timeStamp New value for member timeStamp
 */
void someipStateInfo::timeStamp(
        uint64_t _timeStamp)
{
    m_timeStamp = _timeStamp;
}

/*!
 * @brief This function returns the value of member timeStamp
 * @return Value of member timeStamp
 */
uint64_t someipStateInfo::timeStamp() const
{
    return m_timeStamp;
}

/*!
 * @brief This function returns a reference to member timeStamp
 * @return Reference to member timeStamp
 */
uint64_t& someipStateInfo::timeStamp()
{
    return m_timeStamp;
}


/*!
 * @brief This function sets a value in member srv_id
 * @param _srv_id New value for member srv_id
 */
void someipStateInfo::srv_id(
        uint32_t _srv_id)
{
    m_srv_id = _srv_id;
}

/*!
 * @brief This function returns the value of member srv_id
 * @return Value of member srv_id
 */
uint32_t someipStateInfo::srv_id() const
{
    return m_srv_id;
}

/*!
 * @brief This function returns a reference to member srv_id
 * @return Reference to member srv_id
 */
uint32_t& someipStateInfo::srv_id()
{
    return m_srv_id;
}


/*!
 * @brief This function sets a value in member inst_id
 * @param _inst_id New value for member inst_id
 */
void someipStateInfo::inst_id(
        uint32_t _inst_id)
{
    m_inst_id = _inst_id;
}

/*!
 * @brief This function returns the value of member inst_id
 * @return Value of member inst_id
 */
uint32_t someipStateInfo::inst_id() const
{
    return m_inst_id;
}

/*!
 * @brief This function returns a reference to member inst_id
 * @return Reference to member inst_id
 */
uint32_t& someipStateInfo::inst_id()
{
    return m_inst_id;
}


/*!
 * @brief This function sets a value in member state
 * @param _state New value for member state
 */
void someipStateInfo::state(
        uint8_t _state)
{
    m_state = _state;
}

/*!
 * @brief This function returns the value of member state
 * @return Value of member state
 */
uint8_t someipStateInfo::state() const
{
    return m_state;
}

/*!
 * @brief This function returns a reference to member state
 * @return Reference to member state
 */
uint8_t& someipStateInfo::state()
{
    return m_state;
}


/*!
 * @brief This function sets a value in member channel
 * @param _channel New value for member channel
 */
void someipStateInfo::channel(
        uint16_t _channel)
{
    m_channel = _channel;
}

/*!
 * @brief This function returns the value of member channel
 * @return Value of member channel
 */
uint16_t someipStateInfo::channel() const
{
    return m_channel;
}

/*!
 * @brief This function returns a reference to member channel
 * @return Reference to member channel
 */
uint16_t& someipStateInfo::channel()
{
    return m_channel;
}


// Include auxiliary functions like for serializing/deserializing.
#include "ZoneMasterDataCdrAux.ipp"

