// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ZoneMasterData.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_ZONEMASTERDATA_H_
#define _FAST_DDS_GENERATED_ZONEMASTERDATA_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ZONEMASTERDATA_SOURCE)
#define ZONEMASTERDATA_DllAPI __declspec( dllexport )
#else
#define ZONEMASTERDATA_DllAPI __declspec( dllimport )
#endif // ZONEMASTERDATA_SOURCE
#else
#define ZONEMASTERDATA_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ZONEMASTERDATA_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima





/*!
 * @brief This class represents the structure cansignal defined by the user in the IDL file.
 * @ingroup ZoneMasterData
 */
class cansignal
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport cansignal();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~cansignal();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object cansignal that will be copied.
     */
    eProsima_user_DllExport cansignal(
            const cansignal& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object cansignal that will be copied.
     */
    eProsima_user_DllExport cansignal(
            cansignal&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object cansignal that will be copied.
     */
    eProsima_user_DllExport cansignal& operator =(
            const cansignal& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object cansignal that will be copied.
     */
    eProsima_user_DllExport cansignal& operator =(
            cansignal&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x cansignal object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const cansignal& x) const;

    /*!
     * @brief Comparison operator.
     * @param x cansignal object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const cansignal& x) const;

    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name();


    /*!
     * @brief This function sets a value in member raw_value
     * @param _raw_value New value for member raw_value
     */
    eProsima_user_DllExport void raw_value(
            uint64_t _raw_value);

    /*!
     * @brief This function returns the value of member raw_value
     * @return Value of member raw_value
     */
    eProsima_user_DllExport uint64_t raw_value() const;

    /*!
     * @brief This function returns a reference to member raw_value
     * @return Reference to member raw_value
     */
    eProsima_user_DllExport uint64_t& raw_value();


    /*!
     * @brief This function copies the value in member phy_value
     * @param _phy_value New value to be copied in member phy_value
     */
    eProsima_user_DllExport void phy_value(
            const std::string& _phy_value);

    /*!
     * @brief This function moves the value in member phy_value
     * @param _phy_value New value to be moved in member phy_value
     */
    eProsima_user_DllExport void phy_value(
            std::string&& _phy_value);

    /*!
     * @brief This function returns a constant reference to member phy_value
     * @return Constant reference to member phy_value
     */
    eProsima_user_DllExport const std::string& phy_value() const;

    /*!
     * @brief This function returns a reference to member phy_value
     * @return Reference to member phy_value
     */
    eProsima_user_DllExport std::string& phy_value();

private:

    std::string m_name;
    uint64_t m_raw_value{0};
    std::string m_phy_value;

};




/*!
 * @brief This class represents the structure canpdu defined by the user in the IDL file.
 * @ingroup ZoneMasterData
 */
class canpdu
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport canpdu();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~canpdu();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object canpdu that will be copied.
     */
    eProsima_user_DllExport canpdu(
            const canpdu& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object canpdu that will be copied.
     */
    eProsima_user_DllExport canpdu(
            canpdu&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object canpdu that will be copied.
     */
    eProsima_user_DllExport canpdu& operator =(
            const canpdu& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object canpdu that will be copied.
     */
    eProsima_user_DllExport canpdu& operator =(
            canpdu&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x canpdu object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const canpdu& x) const;

    /*!
     * @brief Comparison operator.
     * @param x canpdu object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const canpdu& x) const;

    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name();


    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            uint32_t _id);

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport uint32_t id() const;

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport uint32_t& id();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<uint8_t>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<uint8_t>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<uint8_t>& data();


    /*!
     * @brief This function copies the value in member signals
     * @param _signals New value to be copied in member signals
     */
    eProsima_user_DllExport void signals(
            const std::vector<cansignal>& _signals);

    /*!
     * @brief This function moves the value in member signals
     * @param _signals New value to be moved in member signals
     */
    eProsima_user_DllExport void signals(
            std::vector<cansignal>&& _signals);

    /*!
     * @brief This function returns a constant reference to member signals
     * @return Constant reference to member signals
     */
    eProsima_user_DllExport const std::vector<cansignal>& signals() const;

    /*!
     * @brief This function returns a reference to member signals
     * @return Reference to member signals
     */
    eProsima_user_DllExport std::vector<cansignal>& signals();

private:

    std::string m_name;
    uint32_t m_id{0};
    std::vector<uint8_t> m_data;
    std::vector<cansignal> m_signals;

};


/*!
 * @brief This class represents the structure canframe defined by the user in the IDL file.
 * @ingroup ZoneMasterData
 */
class canframe
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport canframe();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~canframe();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object canframe that will be copied.
     */
    eProsima_user_DllExport canframe(
            const canframe& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object canframe that will be copied.
     */
    eProsima_user_DllExport canframe(
            canframe&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object canframe that will be copied.
     */
    eProsima_user_DllExport canframe& operator =(
            const canframe& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object canframe that will be copied.
     */
    eProsima_user_DllExport canframe& operator =(
            canframe&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x canframe object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const canframe& x) const;

    /*!
     * @brief Comparison operator.
     * @param x canframe object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const canframe& x) const;

    /*!
     * @brief This function sets a value in member channel
     * @param _channel New value for member channel
     */
    eProsima_user_DllExport void channel(
            uint32_t _channel);

    /*!
     * @brief This function returns the value of member channel
     * @return Value of member channel
     */
    eProsima_user_DllExport uint32_t channel() const;

    /*!
     * @brief This function returns a reference to member channel
     * @return Reference to member channel
     */
    eProsima_user_DllExport uint32_t& channel();


    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            uint32_t _id);

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport uint32_t id() const;

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport uint32_t& id();


    /*!
     * @brief This function sets a value in member dlc
     * @param _dlc New value for member dlc
     */
    eProsima_user_DllExport void dlc(
            uint8_t _dlc);

    /*!
     * @brief This function returns the value of member dlc
     * @return Value of member dlc
     */
    eProsima_user_DllExport uint8_t dlc() const;

    /*!
     * @brief This function returns a reference to member dlc
     * @return Reference to member dlc
     */
    eProsima_user_DllExport uint8_t& dlc();


    /*!
     * @brief This function sets a value in member dataLen
     * @param _dataLen New value for member dataLen
     */
    eProsima_user_DllExport void dataLen(
            uint16_t _dataLen);

    /*!
     * @brief This function returns the value of member dataLen
     * @return Value of member dataLen
     */
    eProsima_user_DllExport uint16_t dataLen() const;

    /*!
     * @brief This function returns a reference to member dataLen
     * @return Reference to member dataLen
     */
    eProsima_user_DllExport uint16_t& dataLen();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<uint8_t>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<uint8_t>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<uint8_t>& data();


    /*!
     * @brief This function sets a value in member cycTime
     * @param _cycTime New value for member cycTime
     */
    eProsima_user_DllExport void cycTime(
            uint64_t _cycTime);

    /*!
     * @brief This function returns the value of member cycTime
     * @return Value of member cycTime
     */
    eProsima_user_DllExport uint64_t cycTime() const;

    /*!
     * @brief This function returns a reference to member cycTime
     * @return Reference to member cycTime
     */
    eProsima_user_DllExport uint64_t& cycTime();


    /*!
     * @brief This function sets a value in member flags
     * @param _flags New value for member flags
     */
    eProsima_user_DllExport void flags(
            uint16_t _flags);

    /*!
     * @brief This function returns the value of member flags
     * @return Value of member flags
     */
    eProsima_user_DllExport uint16_t flags() const;

    /*!
     * @brief This function returns a reference to member flags
     * @return Reference to member flags
     */
    eProsima_user_DllExport uint16_t& flags();


    /*!
     * @brief This function sets a value in member timeStamp
     * @param _timeStamp New value for member timeStamp
     */
    eProsima_user_DllExport void timeStamp(
            uint64_t _timeStamp);

    /*!
     * @brief This function returns the value of member timeStamp
     * @return Value of member timeStamp
     */
    eProsima_user_DllExport uint64_t timeStamp() const;

    /*!
     * @brief This function returns a reference to member timeStamp
     * @return Reference to member timeStamp
     */
    eProsima_user_DllExport uint64_t& timeStamp();


    /*!
     * @brief This function sets a value in member timeStamp_d
     * @param _timeStamp_d New value for member timeStamp_d
     */
    eProsima_user_DllExport void timeStamp_d(
            int64_t _timeStamp_d);

    /*!
     * @brief This function returns the value of member timeStamp_d
     * @return Value of member timeStamp_d
     */
    eProsima_user_DllExport int64_t timeStamp_d() const;

    /*!
     * @brief This function returns a reference to member timeStamp_d
     * @return Reference to member timeStamp_d
     */
    eProsima_user_DllExport int64_t& timeStamp_d();


    /*!
     * @brief This function sets a value in member rxtx
     * @param _rxtx New value for member rxtx
     */
    eProsima_user_DllExport void rxtx(
            uint8_t _rxtx);

    /*!
     * @brief This function returns the value of member rxtx
     * @return Value of member rxtx
     */
    eProsima_user_DllExport uint8_t rxtx() const;

    /*!
     * @brief This function returns a reference to member rxtx
     * @return Reference to member rxtx
     */
    eProsima_user_DllExport uint8_t& rxtx();


    /*!
     * @brief This function sets a value in member isFd
     * @param _isFd New value for member isFd
     */
    eProsima_user_DllExport void isFd(
            uint8_t _isFd);

    /*!
     * @brief This function returns the value of member isFd
     * @return Value of member isFd
     */
    eProsima_user_DllExport uint8_t isFd() const;

    /*!
     * @brief This function returns a reference to member isFd
     * @return Reference to member isFd
     */
    eProsima_user_DllExport uint8_t& isFd();


    /*!
     * @brief This function sets a value in member isRt
     * @param _isRt New value for member isRt
     */
    eProsima_user_DllExport void isRt(
            uint8_t _isRt);

    /*!
     * @brief This function returns the value of member isRt
     * @return Value of member isRt
     */
    eProsima_user_DllExport uint8_t isRt() const;

    /*!
     * @brief This function returns a reference to member isRt
     * @return Reference to member isRt
     */
    eProsima_user_DllExport uint8_t& isRt();


    /*!
     * @brief This function sets a value in member isExt
     * @param _isExt New value for member isExt
     */
    eProsima_user_DllExport void isExt(
            uint8_t _isExt);

    /*!
     * @brief This function returns the value of member isExt
     * @return Value of member isExt
     */
    eProsima_user_DllExport uint8_t isExt() const;

    /*!
     * @brief This function returns a reference to member isExt
     * @return Reference to member isExt
     */
    eProsima_user_DllExport uint8_t& isExt();


    /*!
     * @brief This function sets a value in member errorCode
     * @param _errorCode New value for member errorCode
     */
    eProsima_user_DllExport void errorCode(
            uint8_t _errorCode);

    /*!
     * @brief This function returns the value of member errorCode
     * @return Value of member errorCode
     */
    eProsima_user_DllExport uint8_t errorCode() const;

    /*!
     * @brief This function returns a reference to member errorCode
     * @return Reference to member errorCode
     */
    eProsima_user_DllExport uint8_t& errorCode();


    /*!
     * @brief This function sets a value in member containerPduFlag
     * @param _containerPduFlag New value for member containerPduFlag
     */
    eProsima_user_DllExport void containerPduFlag(
            bool _containerPduFlag);

    /*!
     * @brief This function returns the value of member containerPduFlag
     * @return Value of member containerPduFlag
     */
    eProsima_user_DllExport bool containerPduFlag() const;

    /*!
     * @brief This function returns a reference to member containerPduFlag
     * @return Reference to member containerPduFlag
     */
    eProsima_user_DllExport bool& containerPduFlag();


    /*!
     * @brief This function sets a value in member pduFlag
     * @param _pduFlag New value for member pduFlag
     */
    eProsima_user_DllExport void pduFlag(
            bool _pduFlag);

    /*!
     * @brief This function returns the value of member pduFlag
     * @return Value of member pduFlag
     */
    eProsima_user_DllExport bool pduFlag() const;

    /*!
     * @brief This function returns a reference to member pduFlag
     * @return Reference to member pduFlag
     */
    eProsima_user_DllExport bool& pduFlag();


    /*!
     * @brief This function copies the value in member containPduNames
     * @param _containPduNames New value to be copied in member containPduNames
     */
    eProsima_user_DllExport void containPduNames(
            const std::vector<std::string>& _containPduNames);

    /*!
     * @brief This function moves the value in member containPduNames
     * @param _containPduNames New value to be moved in member containPduNames
     */
    eProsima_user_DllExport void containPduNames(
            std::vector<std::string>&& _containPduNames);

    /*!
     * @brief This function returns a constant reference to member containPduNames
     * @return Constant reference to member containPduNames
     */
    eProsima_user_DllExport const std::vector<std::string>& containPduNames() const;

    /*!
     * @brief This function returns a reference to member containPduNames
     * @return Reference to member containPduNames
     */
    eProsima_user_DllExport std::vector<std::string>& containPduNames();


    /*!
     * @brief This function copies the value in member containPduNum
     * @param _containPduNum New value to be copied in member containPduNum
     */
    eProsima_user_DllExport void containPduNum(
            const std::vector<uint32_t>& _containPduNum);

    /*!
     * @brief This function moves the value in member containPduNum
     * @param _containPduNum New value to be moved in member containPduNum
     */
    eProsima_user_DllExport void containPduNum(
            std::vector<uint32_t>&& _containPduNum);

    /*!
     * @brief This function returns a constant reference to member containPduNum
     * @return Constant reference to member containPduNum
     */
    eProsima_user_DllExport const std::vector<uint32_t>& containPduNum() const;

    /*!
     * @brief This function returns a reference to member containPduNum
     * @return Reference to member containPduNum
     */
    eProsima_user_DllExport std::vector<uint32_t>& containPduNum();


    /*!
     * @brief This function copies the value in member containPdus
     * @param _containPdus New value to be copied in member containPdus
     */
    eProsima_user_DllExport void containPdus(
            const std::vector<canpdu>& _containPdus);

    /*!
     * @brief This function moves the value in member containPdus
     * @param _containPdus New value to be moved in member containPdus
     */
    eProsima_user_DllExport void containPdus(
            std::vector<canpdu>&& _containPdus);

    /*!
     * @brief This function returns a constant reference to member containPdus
     * @return Constant reference to member containPdus
     */
    eProsima_user_DllExport const std::vector<canpdu>& containPdus() const;

    /*!
     * @brief This function returns a reference to member containPdus
     * @return Reference to member containPdus
     */
    eProsima_user_DllExport std::vector<canpdu>& containPdus();


    /*!
     * @brief This function copies the value in member pdus
     * @param _pdus New value to be copied in member pdus
     */
    eProsima_user_DllExport void pdus(
            const std::vector<canpdu>& _pdus);

    /*!
     * @brief This function moves the value in member pdus
     * @param _pdus New value to be moved in member pdus
     */
    eProsima_user_DllExport void pdus(
            std::vector<canpdu>&& _pdus);

    /*!
     * @brief This function returns a constant reference to member pdus
     * @return Constant reference to member pdus
     */
    eProsima_user_DllExport const std::vector<canpdu>& pdus() const;

    /*!
     * @brief This function returns a reference to member pdus
     * @return Reference to member pdus
     */
    eProsima_user_DllExport std::vector<canpdu>& pdus();


    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name();

private:

    uint32_t m_channel{0};
    uint32_t m_id{0};
    uint8_t m_dlc{0};
    uint16_t m_dataLen{0};
    std::vector<uint8_t> m_data;
    uint64_t m_cycTime{0};
    uint16_t m_flags{0};
    uint64_t m_timeStamp{0};
    int64_t m_timeStamp_d{0};
    uint8_t m_rxtx{0};
    uint8_t m_isFd{0};
    uint8_t m_isRt{0};
    uint8_t m_isExt{0};
    uint8_t m_errorCode{0};
    bool m_containerPduFlag{false};
    bool m_pduFlag{false};
    std::vector<std::string> m_containPduNames;
    std::vector<uint32_t> m_containPduNum;
    std::vector<canpdu> m_containPdus;
    std::vector<canpdu> m_pdus;
    std::string m_name;

};


/*!
 * @brief This class represents the structure canMessage defined by the user in the IDL file.
 * @ingroup ZoneMasterData
 */
class canMessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport canMessage();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~canMessage();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object canMessage that will be copied.
     */
    eProsima_user_DllExport canMessage(
            const canMessage& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object canMessage that will be copied.
     */
    eProsima_user_DllExport canMessage(
            canMessage&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object canMessage that will be copied.
     */
    eProsima_user_DllExport canMessage& operator =(
            const canMessage& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object canMessage that will be copied.
     */
    eProsima_user_DllExport canMessage& operator =(
            canMessage&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x canMessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const canMessage& x) const;

    /*!
     * @brief Comparison operator.
     * @param x canMessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const canMessage& x) const;

    /*!
     * @brief This function sets a value in member channel
     * @param _channel New value for member channel
     */
    eProsima_user_DllExport void channel(
            uint32_t _channel);

    /*!
     * @brief This function returns the value of member channel
     * @return Value of member channel
     */
    eProsima_user_DllExport uint32_t channel() const;

    /*!
     * @brief This function returns a reference to member channel
     * @return Reference to member channel
     */
    eProsima_user_DllExport uint32_t& channel();


    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            uint32_t _id);

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport uint32_t id() const;

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport uint32_t& id();


    /*!
     * @brief This function sets a value in member dlc
     * @param _dlc New value for member dlc
     */
    eProsima_user_DllExport void dlc(
            uint8_t _dlc);

    /*!
     * @brief This function returns the value of member dlc
     * @return Value of member dlc
     */
    eProsima_user_DllExport uint8_t dlc() const;

    /*!
     * @brief This function returns a reference to member dlc
     * @return Reference to member dlc
     */
    eProsima_user_DllExport uint8_t& dlc();


    /*!
     * @brief This function sets a value in member dataLen
     * @param _dataLen New value for member dataLen
     */
    eProsima_user_DllExport void dataLen(
            uint16_t _dataLen);

    /*!
     * @brief This function returns the value of member dataLen
     * @return Value of member dataLen
     */
    eProsima_user_DllExport uint16_t dataLen() const;

    /*!
     * @brief This function returns a reference to member dataLen
     * @return Reference to member dataLen
     */
    eProsima_user_DllExport uint16_t& dataLen();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<uint8_t>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<uint8_t>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<uint8_t>& data();


    /*!
     * @brief This function sets a value in member cycTime
     * @param _cycTime New value for member cycTime
     */
    eProsima_user_DllExport void cycTime(
            uint64_t _cycTime);

    /*!
     * @brief This function returns the value of member cycTime
     * @return Value of member cycTime
     */
    eProsima_user_DllExport uint64_t cycTime() const;

    /*!
     * @brief This function returns a reference to member cycTime
     * @return Reference to member cycTime
     */
    eProsima_user_DllExport uint64_t& cycTime();


    /*!
     * @brief This function sets a value in member flags
     * @param _flags New value for member flags
     */
    eProsima_user_DllExport void flags(
            uint16_t _flags);

    /*!
     * @brief This function returns the value of member flags
     * @return Value of member flags
     */
    eProsima_user_DllExport uint16_t flags() const;

    /*!
     * @brief This function returns a reference to member flags
     * @return Reference to member flags
     */
    eProsima_user_DllExport uint16_t& flags();


    /*!
     * @brief This function sets a value in member timeStamp
     * @param _timeStamp New value for member timeStamp
     */
    eProsima_user_DllExport void timeStamp(
            uint64_t _timeStamp);

    /*!
     * @brief This function returns the value of member timeStamp
     * @return Value of member timeStamp
     */
    eProsima_user_DllExport uint64_t timeStamp() const;

    /*!
     * @brief This function returns a reference to member timeStamp
     * @return Reference to member timeStamp
     */
    eProsima_user_DllExport uint64_t& timeStamp();


    /*!
     * @brief This function sets a value in member timeStamp_d
     * @param _timeStamp_d New value for member timeStamp_d
     */
    eProsima_user_DllExport void timeStamp_d(
            int64_t _timeStamp_d);

    /*!
     * @brief This function returns the value of member timeStamp_d
     * @return Value of member timeStamp_d
     */
    eProsima_user_DllExport int64_t timeStamp_d() const;

    /*!
     * @brief This function returns a reference to member timeStamp_d
     * @return Reference to member timeStamp_d
     */
    eProsima_user_DllExport int64_t& timeStamp_d();


    /*!
     * @brief This function sets a value in member rxtx
     * @param _rxtx New value for member rxtx
     */
    eProsima_user_DllExport void rxtx(
            uint8_t _rxtx);

    /*!
     * @brief This function returns the value of member rxtx
     * @return Value of member rxtx
     */
    eProsima_user_DllExport uint8_t rxtx() const;

    /*!
     * @brief This function returns a reference to member rxtx
     * @return Reference to member rxtx
     */
    eProsima_user_DllExport uint8_t& rxtx();


    /*!
     * @brief This function sets a value in member isFd
     * @param _isFd New value for member isFd
     */
    eProsima_user_DllExport void isFd(
            uint8_t _isFd);

    /*!
     * @brief This function returns the value of member isFd
     * @return Value of member isFd
     */
    eProsima_user_DllExport uint8_t isFd() const;

    /*!
     * @brief This function returns a reference to member isFd
     * @return Reference to member isFd
     */
    eProsima_user_DllExport uint8_t& isFd();


    /*!
     * @brief This function sets a value in member isRt
     * @param _isRt New value for member isRt
     */
    eProsima_user_DllExport void isRt(
            uint8_t _isRt);

    /*!
     * @brief This function returns the value of member isRt
     * @return Value of member isRt
     */
    eProsima_user_DllExport uint8_t isRt() const;

    /*!
     * @brief This function returns a reference to member isRt
     * @return Reference to member isRt
     */
    eProsima_user_DllExport uint8_t& isRt();


    /*!
     * @brief This function sets a value in member isExt
     * @param _isExt New value for member isExt
     */
    eProsima_user_DllExport void isExt(
            uint8_t _isExt);

    /*!
     * @brief This function returns the value of member isExt
     * @return Value of member isExt
     */
    eProsima_user_DllExport uint8_t isExt() const;

    /*!
     * @brief This function returns a reference to member isExt
     * @return Reference to member isExt
     */
    eProsima_user_DllExport uint8_t& isExt();


    /*!
     * @brief This function sets a value in member errorCode
     * @param _errorCode New value for member errorCode
     */
    eProsima_user_DllExport void errorCode(
            uint8_t _errorCode);

    /*!
     * @brief This function returns the value of member errorCode
     * @return Value of member errorCode
     */
    eProsima_user_DllExport uint8_t errorCode() const;

    /*!
     * @brief This function returns a reference to member errorCode
     * @return Reference to member errorCode
     */
    eProsima_user_DllExport uint8_t& errorCode();

private:

    uint32_t m_channel{0};
    uint32_t m_id{0};
    uint8_t m_dlc{0};
    uint16_t m_dataLen{0};
    std::vector<uint8_t> m_data;
    uint64_t m_cycTime{0};
    uint16_t m_flags{0};
    uint64_t m_timeStamp{0};
    int64_t m_timeStamp_d{0};
    uint8_t m_rxtx{0};
    uint8_t m_isFd{0};
    uint8_t m_isRt{0};
    uint8_t m_isExt{0};
    uint8_t m_errorCode{0};

};




/*!
 * @brief This class represents the structure canMessages defined by the user in the IDL file.
 * @ingroup ZoneMasterData
 */
class canMessages
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport canMessages();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~canMessages();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object canMessages that will be copied.
     */
    eProsima_user_DllExport canMessages(
            const canMessages& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object canMessages that will be copied.
     */
    eProsima_user_DllExport canMessages(
            canMessages&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object canMessages that will be copied.
     */
    eProsima_user_DllExport canMessages& operator =(
            const canMessages& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object canMessages that will be copied.
     */
    eProsima_user_DllExport canMessages& operator =(
            canMessages&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x canMessages object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const canMessages& x) const;

    /*!
     * @brief Comparison operator.
     * @param x canMessages object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const canMessages& x) const;

    /*!
     * @brief This function sets a value in member len
     * @param _len New value for member len
     */
    eProsima_user_DllExport void len(
            uint64_t _len);

    /*!
     * @brief This function returns the value of member len
     * @return Value of member len
     */
    eProsima_user_DllExport uint64_t len() const;

    /*!
     * @brief This function returns a reference to member len
     * @return Reference to member len
     */
    eProsima_user_DllExport uint64_t& len();


    /*!
     * @brief This function copies the value in member canMsgs
     * @param _canMsgs New value to be copied in member canMsgs
     */
    eProsima_user_DllExport void canMsgs(
            const std::vector<canMessage>& _canMsgs);

    /*!
     * @brief This function moves the value in member canMsgs
     * @param _canMsgs New value to be moved in member canMsgs
     */
    eProsima_user_DllExport void canMsgs(
            std::vector<canMessage>&& _canMsgs);

    /*!
     * @brief This function returns a constant reference to member canMsgs
     * @return Constant reference to member canMsgs
     */
    eProsima_user_DllExport const std::vector<canMessage>& canMsgs() const;

    /*!
     * @brief This function returns a reference to member canMsgs
     * @return Reference to member canMsgs
     */
    eProsima_user_DllExport std::vector<canMessage>& canMsgs();

private:

    uint64_t m_len{0};
    std::vector<canMessage> m_canMsgs;

};




/*!
 * @brief This class represents the structure doipMessage defined by the user in the IDL file.
 * @ingroup ZoneMasterData
 */
class doipMessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport doipMessage();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~doipMessage();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object doipMessage that will be copied.
     */
    eProsima_user_DllExport doipMessage(
            const doipMessage& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object doipMessage that will be copied.
     */
    eProsima_user_DllExport doipMessage(
            doipMessage&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object doipMessage that will be copied.
     */
    eProsima_user_DllExport doipMessage& operator =(
            const doipMessage& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object doipMessage that will be copied.
     */
    eProsima_user_DllExport doipMessage& operator =(
            doipMessage&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x doipMessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const doipMessage& x) const;

    /*!
     * @brief Comparison operator.
     * @param x doipMessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const doipMessage& x) const;

    /*!
     * @brief This function sets a value in member targetAddress
     * @param _targetAddress New value for member targetAddress
     */
    eProsima_user_DllExport void targetAddress(
            uint32_t _targetAddress);

    /*!
     * @brief This function returns the value of member targetAddress
     * @return Value of member targetAddress
     */
    eProsima_user_DllExport uint32_t targetAddress() const;

    /*!
     * @brief This function returns a reference to member targetAddress
     * @return Reference to member targetAddress
     */
    eProsima_user_DllExport uint32_t& targetAddress();


    /*!
     * @brief This function sets a value in member headerType
     * @param _headerType New value for member headerType
     */
    eProsima_user_DllExport void headerType(
            uint32_t _headerType);

    /*!
     * @brief This function returns the value of member headerType
     * @return Value of member headerType
     */
    eProsima_user_DllExport uint32_t headerType() const;

    /*!
     * @brief This function returns a reference to member headerType
     * @return Reference to member headerType
     */
    eProsima_user_DllExport uint32_t& headerType();


    /*!
     * @brief This function copies the value in member cmd
     * @param _cmd New value to be copied in member cmd
     */
    eProsima_user_DllExport void cmd(
            const std::vector<uint8_t>& _cmd);

    /*!
     * @brief This function moves the value in member cmd
     * @param _cmd New value to be moved in member cmd
     */
    eProsima_user_DllExport void cmd(
            std::vector<uint8_t>&& _cmd);

    /*!
     * @brief This function returns a constant reference to member cmd
     * @return Constant reference to member cmd
     */
    eProsima_user_DllExport const std::vector<uint8_t>& cmd() const;

    /*!
     * @brief This function returns a reference to member cmd
     * @return Reference to member cmd
     */
    eProsima_user_DllExport std::vector<uint8_t>& cmd();

private:

    uint32_t m_targetAddress{0};
    uint32_t m_headerType{0};
    std::vector<uint8_t> m_cmd;

};


/*!
 * @brief This class represents the structure ethFrame defined by the user in the IDL file.
 * @ingroup ZoneMasterData
 */
class ethFrame
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ethFrame();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ethFrame();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ethFrame that will be copied.
     */
    eProsima_user_DllExport ethFrame(
            const ethFrame& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ethFrame that will be copied.
     */
    eProsima_user_DllExport ethFrame(
            ethFrame&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ethFrame that will be copied.
     */
    eProsima_user_DllExport ethFrame& operator =(
            const ethFrame& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ethFrame that will be copied.
     */
    eProsima_user_DllExport ethFrame& operator =(
            ethFrame&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ethFrame object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ethFrame& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ethFrame object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ethFrame& x) const;

    /*!
     * @brief This function copies the value in member sourceAddress
     * @param _sourceAddress New value to be copied in member sourceAddress
     */
    eProsima_user_DllExport void sourceAddress(
            const std::array<uint8_t, 6>& _sourceAddress);

    /*!
     * @brief This function moves the value in member sourceAddress
     * @param _sourceAddress New value to be moved in member sourceAddress
     */
    eProsima_user_DllExport void sourceAddress(
            std::array<uint8_t, 6>&& _sourceAddress);

    /*!
     * @brief This function returns a constant reference to member sourceAddress
     * @return Constant reference to member sourceAddress
     */
    eProsima_user_DllExport const std::array<uint8_t, 6>& sourceAddress() const;

    /*!
     * @brief This function returns a reference to member sourceAddress
     * @return Reference to member sourceAddress
     */
    eProsima_user_DllExport std::array<uint8_t, 6>& sourceAddress();


    /*!
     * @brief This function sets a value in member channle
     * @param _channle New value for member channle
     */
    eProsima_user_DllExport void channle(
            uint16_t _channle);

    /*!
     * @brief This function returns the value of member channle
     * @return Value of member channle
     */
    eProsima_user_DllExport uint16_t channle() const;

    /*!
     * @brief This function returns a reference to member channle
     * @return Reference to member channle
     */
    eProsima_user_DllExport uint16_t& channle();


    /*!
     * @brief This function copies the value in member destinationAddress
     * @param _destinationAddress New value to be copied in member destinationAddress
     */
    eProsima_user_DllExport void destinationAddress(
            const std::array<uint8_t, 6>& _destinationAddress);

    /*!
     * @brief This function moves the value in member destinationAddress
     * @param _destinationAddress New value to be moved in member destinationAddress
     */
    eProsima_user_DllExport void destinationAddress(
            std::array<uint8_t, 6>&& _destinationAddress);

    /*!
     * @brief This function returns a constant reference to member destinationAddress
     * @return Constant reference to member destinationAddress
     */
    eProsima_user_DllExport const std::array<uint8_t, 6>& destinationAddress() const;

    /*!
     * @brief This function returns a reference to member destinationAddress
     * @return Reference to member destinationAddress
     */
    eProsima_user_DllExport std::array<uint8_t, 6>& destinationAddress();


    /*!
     * @brief This function sets a value in member dir
     * @param _dir New value for member dir
     */
    eProsima_user_DllExport void dir(
            uint16_t _dir);

    /*!
     * @brief This function returns the value of member dir
     * @return Value of member dir
     */
    eProsima_user_DllExport uint16_t dir() const;

    /*!
     * @brief This function returns a reference to member dir
     * @return Reference to member dir
     */
    eProsima_user_DllExport uint16_t& dir();


    /*!
     * @brief This function sets a value in member type
     * @param _type New value for member type
     */
    eProsima_user_DllExport void type(
            uint16_t _type);

    /*!
     * @brief This function returns the value of member type
     * @return Value of member type
     */
    eProsima_user_DllExport uint16_t type() const;

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport uint16_t& type();


    /*!
     * @brief This function sets a value in member tpid
     * @param _tpid New value for member tpid
     */
    eProsima_user_DllExport void tpid(
            uint16_t _tpid);

    /*!
     * @brief This function returns the value of member tpid
     * @return Value of member tpid
     */
    eProsima_user_DllExport uint16_t tpid() const;

    /*!
     * @brief This function returns a reference to member tpid
     * @return Reference to member tpid
     */
    eProsima_user_DllExport uint16_t& tpid();


    /*!
     * @brief This function sets a value in member tci
     * @param _tci New value for member tci
     */
    eProsima_user_DllExport void tci(
            uint16_t _tci);

    /*!
     * @brief This function returns the value of member tci
     * @return Value of member tci
     */
    eProsima_user_DllExport uint16_t tci() const;

    /*!
     * @brief This function returns a reference to member tci
     * @return Reference to member tci
     */
    eProsima_user_DllExport uint16_t& tci();


    /*!
     * @brief This function sets a value in member payLoadLength
     * @param _payLoadLength New value for member payLoadLength
     */
    eProsima_user_DllExport void payLoadLength(
            uint16_t _payLoadLength);

    /*!
     * @brief This function returns the value of member payLoadLength
     * @return Value of member payLoadLength
     */
    eProsima_user_DllExport uint16_t payLoadLength() const;

    /*!
     * @brief This function returns a reference to member payLoadLength
     * @return Reference to member payLoadLength
     */
    eProsima_user_DllExport uint16_t& payLoadLength();


    /*!
     * @brief This function sets a value in member reservedEthernetFrame
     * @param _reservedEthernetFrame New value for member reservedEthernetFrame
     */
    eProsima_user_DllExport void reservedEthernetFrame(
            uint64_t _reservedEthernetFrame);

    /*!
     * @brief This function returns the value of member reservedEthernetFrame
     * @return Value of member reservedEthernetFrame
     */
    eProsima_user_DllExport uint64_t reservedEthernetFrame() const;

    /*!
     * @brief This function returns a reference to member reservedEthernetFrame
     * @return Reference to member reservedEthernetFrame
     */
    eProsima_user_DllExport uint64_t& reservedEthernetFrame();


    /*!
     * @brief This function copies the value in member payLoad
     * @param _payLoad New value to be copied in member payLoad
     */
    eProsima_user_DllExport void payLoad(
            const std::vector<uint8_t>& _payLoad);

    /*!
     * @brief This function moves the value in member payLoad
     * @param _payLoad New value to be moved in member payLoad
     */
    eProsima_user_DllExport void payLoad(
            std::vector<uint8_t>&& _payLoad);

    /*!
     * @brief This function returns a constant reference to member payLoad
     * @return Constant reference to member payLoad
     */
    eProsima_user_DllExport const std::vector<uint8_t>& payLoad() const;

    /*!
     * @brief This function returns a reference to member payLoad
     * @return Reference to member payLoad
     */
    eProsima_user_DllExport std::vector<uint8_t>& payLoad();


    /*!
     * @brief This function sets a value in member timeStamp
     * @param _timeStamp New value for member timeStamp
     */
    eProsima_user_DllExport void timeStamp(
            uint64_t _timeStamp);

    /*!
     * @brief This function returns the value of member timeStamp
     * @return Value of member timeStamp
     */
    eProsima_user_DllExport uint64_t timeStamp() const;

    /*!
     * @brief This function returns a reference to member timeStamp
     * @return Reference to member timeStamp
     */
    eProsima_user_DllExport uint64_t& timeStamp();

private:

    std::array<uint8_t, 6> m_sourceAddress{0};
    uint16_t m_channle{0};
    std::array<uint8_t, 6> m_destinationAddress{0};
    uint16_t m_dir{0};
    uint16_t m_type{0};
    uint16_t m_tpid{0};
    uint16_t m_tci{0};
    uint16_t m_payLoadLength{0};
    uint64_t m_reservedEthernetFrame{0};
    std::vector<uint8_t> m_payLoad;
    uint64_t m_timeStamp{0};

};


/*!
 * @brief This class represents the structure linSignal defined by the user in the IDL file.
 * @ingroup ZoneMasterData
 */
class linSignal
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport linSignal();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~linSignal();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object linSignal that will be copied.
     */
    eProsima_user_DllExport linSignal(
            const linSignal& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object linSignal that will be copied.
     */
    eProsima_user_DllExport linSignal(
            linSignal&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object linSignal that will be copied.
     */
    eProsima_user_DllExport linSignal& operator =(
            const linSignal& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object linSignal that will be copied.
     */
    eProsima_user_DllExport linSignal& operator =(
            linSignal&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x linSignal object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const linSignal& x) const;

    /*!
     * @brief Comparison operator.
     * @param x linSignal object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const linSignal& x) const;

    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name();


    /*!
     * @brief This function sets a value in member raw_value
     * @param _raw_value New value for member raw_value
     */
    eProsima_user_DllExport void raw_value(
            uint64_t _raw_value);

    /*!
     * @brief This function returns the value of member raw_value
     * @return Value of member raw_value
     */
    eProsima_user_DllExport uint64_t raw_value() const;

    /*!
     * @brief This function returns a reference to member raw_value
     * @return Reference to member raw_value
     */
    eProsima_user_DllExport uint64_t& raw_value();


    /*!
     * @brief This function copies the value in member phy_value
     * @param _phy_value New value to be copied in member phy_value
     */
    eProsima_user_DllExport void phy_value(
            const std::string& _phy_value);

    /*!
     * @brief This function moves the value in member phy_value
     * @param _phy_value New value to be moved in member phy_value
     */
    eProsima_user_DllExport void phy_value(
            std::string&& _phy_value);

    /*!
     * @brief This function returns a constant reference to member phy_value
     * @return Constant reference to member phy_value
     */
    eProsima_user_DllExport const std::string& phy_value() const;

    /*!
     * @brief This function returns a reference to member phy_value
     * @return Reference to member phy_value
     */
    eProsima_user_DllExport std::string& phy_value();


    /*!
     * @brief This function copies the value in member logical_value
     * @param _logical_value New value to be copied in member logical_value
     */
    eProsima_user_DllExport void logical_value(
            const std::string& _logical_value);

    /*!
     * @brief This function moves the value in member logical_value
     * @param _logical_value New value to be moved in member logical_value
     */
    eProsima_user_DllExport void logical_value(
            std::string&& _logical_value);

    /*!
     * @brief This function returns a constant reference to member logical_value
     * @return Constant reference to member logical_value
     */
    eProsima_user_DllExport const std::string& logical_value() const;

    /*!
     * @brief This function returns a reference to member logical_value
     * @return Reference to member logical_value
     */
    eProsima_user_DllExport std::string& logical_value();

private:

    std::string m_name;
    uint64_t m_raw_value{0};
    std::string m_phy_value;
    std::string m_logical_value;

};


/*!
 * @brief This class represents the structure linFrame defined by the user in the IDL file.
 * @ingroup ZoneMasterData
 */
class linFrame
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport linFrame();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~linFrame();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object linFrame that will be copied.
     */
    eProsima_user_DllExport linFrame(
            const linFrame& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object linFrame that will be copied.
     */
    eProsima_user_DllExport linFrame(
            linFrame&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object linFrame that will be copied.
     */
    eProsima_user_DllExport linFrame& operator =(
            const linFrame& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object linFrame that will be copied.
     */
    eProsima_user_DllExport linFrame& operator =(
            linFrame&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x linFrame object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const linFrame& x) const;

    /*!
     * @brief Comparison operator.
     * @param x linFrame object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const linFrame& x) const;

    /*!
     * @brief This function sets a value in member channel
     * @param _channel New value for member channel
     */
    eProsima_user_DllExport void channel(
            uint32_t _channel);

    /*!
     * @brief This function returns the value of member channel
     * @return Value of member channel
     */
    eProsima_user_DllExport uint32_t channel() const;

    /*!
     * @brief This function returns a reference to member channel
     * @return Reference to member channel
     */
    eProsima_user_DllExport uint32_t& channel();


    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            uint32_t _id);

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport uint32_t id() const;

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport uint32_t& id();


    /*!
     * @brief This function sets a value in member dlc
     * @param _dlc New value for member dlc
     */
    eProsima_user_DllExport void dlc(
            uint8_t _dlc);

    /*!
     * @brief This function returns the value of member dlc
     * @return Value of member dlc
     */
    eProsima_user_DllExport uint8_t dlc() const;

    /*!
     * @brief This function returns a reference to member dlc
     * @return Reference to member dlc
     */
    eProsima_user_DllExport uint8_t& dlc();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<uint8_t>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<uint8_t>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<uint8_t>& data();


    /*!
     * @brief This function sets a value in member flags
     * @param _flags New value for member flags
     */
    eProsima_user_DllExport void flags(
            uint16_t _flags);

    /*!
     * @brief This function returns the value of member flags
     * @return Value of member flags
     */
    eProsima_user_DllExport uint16_t flags() const;

    /*!
     * @brief This function returns a reference to member flags
     * @return Reference to member flags
     */
    eProsima_user_DllExport uint16_t& flags();


    /*!
     * @brief This function sets a value in member timeStamp
     * @param _timeStamp New value for member timeStamp
     */
    eProsima_user_DllExport void timeStamp(
            uint64_t _timeStamp);

    /*!
     * @brief This function returns the value of member timeStamp
     * @return Value of member timeStamp
     */
    eProsima_user_DllExport uint64_t timeStamp() const;

    /*!
     * @brief This function returns a reference to member timeStamp
     * @return Reference to member timeStamp
     */
    eProsima_user_DllExport uint64_t& timeStamp();


    /*!
     * @brief This function sets a value in member timeStamp_d
     * @param _timeStamp_d New value for member timeStamp_d
     */
    eProsima_user_DllExport void timeStamp_d(
            int64_t _timeStamp_d);

    /*!
     * @brief This function returns the value of member timeStamp_d
     * @return Value of member timeStamp_d
     */
    eProsima_user_DllExport int64_t timeStamp_d() const;

    /*!
     * @brief This function returns a reference to member timeStamp_d
     * @return Reference to member timeStamp_d
     */
    eProsima_user_DllExport int64_t& timeStamp_d();


    /*!
     * @brief This function sets a value in member rxtx
     * @param _rxtx New value for member rxtx
     */
    eProsima_user_DllExport void rxtx(
            uint8_t _rxtx);

    /*!
     * @brief This function returns the value of member rxtx
     * @return Value of member rxtx
     */
    eProsima_user_DllExport uint8_t rxtx() const;

    /*!
     * @brief This function returns a reference to member rxtx
     * @return Reference to member rxtx
     */
    eProsima_user_DllExport uint8_t& rxtx();


    /*!
     * @brief This function sets a value in member errorCode
     * @param _errorCode New value for member errorCode
     */
    eProsima_user_DllExport void errorCode(
            uint8_t _errorCode);

    /*!
     * @brief This function returns the value of member errorCode
     * @return Value of member errorCode
     */
    eProsima_user_DllExport uint8_t errorCode() const;

    /*!
     * @brief This function returns a reference to member errorCode
     * @return Reference to member errorCode
     */
    eProsima_user_DllExport uint8_t& errorCode();


    /*!
     * @brief This function sets a value in member NMstate
     * @param _NMstate New value for member NMstate
     */
    eProsima_user_DllExport void NMstate(
            uint8_t _NMstate);

    /*!
     * @brief This function returns the value of member NMstate
     * @return Value of member NMstate
     */
    eProsima_user_DllExport uint8_t NMstate() const;

    /*!
     * @brief This function returns a reference to member NMstate
     * @return Reference to member NMstate
     */
    eProsima_user_DllExport uint8_t& NMstate();


    /*!
     * @brief This function sets a value in member isMasterFrame
     * @param _isMasterFrame New value for member isMasterFrame
     */
    eProsima_user_DllExport void isMasterFrame(
            uint8_t _isMasterFrame);

    /*!
     * @brief This function returns the value of member isMasterFrame
     * @return Value of member isMasterFrame
     */
    eProsima_user_DllExport uint8_t isMasterFrame() const;

    /*!
     * @brief This function returns a reference to member isMasterFrame
     * @return Reference to member isMasterFrame
     */
    eProsima_user_DllExport uint8_t& isMasterFrame();


    /*!
     * @brief This function copies the value in member signals
     * @param _signals New value to be copied in member signals
     */
    eProsima_user_DllExport void signals(
            const std::vector<linSignal>& _signals);

    /*!
     * @brief This function moves the value in member signals
     * @param _signals New value to be moved in member signals
     */
    eProsima_user_DllExport void signals(
            std::vector<linSignal>&& _signals);

    /*!
     * @brief This function returns a constant reference to member signals
     * @return Constant reference to member signals
     */
    eProsima_user_DllExport const std::vector<linSignal>& signals() const;

    /*!
     * @brief This function returns a reference to member signals
     * @return Reference to member signals
     */
    eProsima_user_DllExport std::vector<linSignal>& signals();


    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name();

private:

    uint32_t m_channel{0};
    uint32_t m_id{0};
    uint8_t m_dlc{0};
    std::vector<uint8_t> m_data;
    uint16_t m_flags{0};
    uint64_t m_timeStamp{0};
    int64_t m_timeStamp_d{0};
    uint8_t m_rxtx{0};
    uint8_t m_errorCode{0};
    uint8_t m_NMstate{0};
    uint8_t m_isMasterFrame{0};
    std::vector<linSignal> m_signals;
    std::string m_name;

};




/*!
 * @brief This class represents the structure linFrames defined by the user in the IDL file.
 * @ingroup ZoneMasterData
 */
class linFrames
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport linFrames();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~linFrames();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object linFrames that will be copied.
     */
    eProsima_user_DllExport linFrames(
            const linFrames& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object linFrames that will be copied.
     */
    eProsima_user_DllExport linFrames(
            linFrames&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object linFrames that will be copied.
     */
    eProsima_user_DllExport linFrames& operator =(
            const linFrames& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object linFrames that will be copied.
     */
    eProsima_user_DllExport linFrames& operator =(
            linFrames&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x linFrames object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const linFrames& x) const;

    /*!
     * @brief Comparison operator.
     * @param x linFrames object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const linFrames& x) const;

    /*!
     * @brief This function sets a value in member len
     * @param _len New value for member len
     */
    eProsima_user_DllExport void len(
            uint64_t _len);

    /*!
     * @brief This function returns the value of member len
     * @return Value of member len
     */
    eProsima_user_DllExport uint64_t len() const;

    /*!
     * @brief This function returns a reference to member len
     * @return Reference to member len
     */
    eProsima_user_DllExport uint64_t& len();


    /*!
     * @brief This function copies the value in member linframes
     * @param _linframes New value to be copied in member linframes
     */
    eProsima_user_DllExport void linframes(
            const std::vector<linFrame>& _linframes);

    /*!
     * @brief This function moves the value in member linframes
     * @param _linframes New value to be moved in member linframes
     */
    eProsima_user_DllExport void linframes(
            std::vector<linFrame>&& _linframes);

    /*!
     * @brief This function returns a constant reference to member linframes
     * @return Constant reference to member linframes
     */
    eProsima_user_DllExport const std::vector<linFrame>& linframes() const;

    /*!
     * @brief This function returns a reference to member linframes
     * @return Reference to member linframes
     */
    eProsima_user_DllExport std::vector<linFrame>& linframes();

private:

    uint64_t m_len{0};
    std::vector<linFrame> m_linframes;

};


/*!
 * @brief This class represents the structure linMessage defined by the user in the IDL file.
 * @ingroup ZoneMasterData
 */
class linMessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport linMessage();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~linMessage();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object linMessage that will be copied.
     */
    eProsima_user_DllExport linMessage(
            const linMessage& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object linMessage that will be copied.
     */
    eProsima_user_DllExport linMessage(
            linMessage&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object linMessage that will be copied.
     */
    eProsima_user_DllExport linMessage& operator =(
            const linMessage& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object linMessage that will be copied.
     */
    eProsima_user_DllExport linMessage& operator =(
            linMessage&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x linMessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const linMessage& x) const;

    /*!
     * @brief Comparison operator.
     * @param x linMessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const linMessage& x) const;

    /*!
     * @brief This function sets a value in member channel
     * @param _channel New value for member channel
     */
    eProsima_user_DllExport void channel(
            uint32_t _channel);

    /*!
     * @brief This function returns the value of member channel
     * @return Value of member channel
     */
    eProsima_user_DllExport uint32_t channel() const;

    /*!
     * @brief This function returns a reference to member channel
     * @return Reference to member channel
     */
    eProsima_user_DllExport uint32_t& channel();


    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            uint32_t _id);

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport uint32_t id() const;

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport uint32_t& id();


    /*!
     * @brief This function sets a value in member dlc
     * @param _dlc New value for member dlc
     */
    eProsima_user_DllExport void dlc(
            uint8_t _dlc);

    /*!
     * @brief This function returns the value of member dlc
     * @return Value of member dlc
     */
    eProsima_user_DllExport uint8_t dlc() const;

    /*!
     * @brief This function returns a reference to member dlc
     * @return Reference to member dlc
     */
    eProsima_user_DllExport uint8_t& dlc();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<uint8_t>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<uint8_t>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<uint8_t>& data();


    /*!
     * @brief This function copies the value in member dataParser
     * @param _dataParser New value to be copied in member dataParser
     */
    eProsima_user_DllExport void dataParser(
            const std::vector<uint8_t>& _dataParser);

    /*!
     * @brief This function moves the value in member dataParser
     * @param _dataParser New value to be moved in member dataParser
     */
    eProsima_user_DllExport void dataParser(
            std::vector<uint8_t>&& _dataParser);

    /*!
     * @brief This function returns a constant reference to member dataParser
     * @return Constant reference to member dataParser
     */
    eProsima_user_DllExport const std::vector<uint8_t>& dataParser() const;

    /*!
     * @brief This function returns a reference to member dataParser
     * @return Reference to member dataParser
     */
    eProsima_user_DllExport std::vector<uint8_t>& dataParser();


    /*!
     * @brief This function sets a value in member flags
     * @param _flags New value for member flags
     */
    eProsima_user_DllExport void flags(
            uint16_t _flags);

    /*!
     * @brief This function returns the value of member flags
     * @return Value of member flags
     */
    eProsima_user_DllExport uint16_t flags() const;

    /*!
     * @brief This function returns a reference to member flags
     * @return Reference to member flags
     */
    eProsima_user_DllExport uint16_t& flags();


    /*!
     * @brief This function sets a value in member timeStamp
     * @param _timeStamp New value for member timeStamp
     */
    eProsima_user_DllExport void timeStamp(
            uint64_t _timeStamp);

    /*!
     * @brief This function returns the value of member timeStamp
     * @return Value of member timeStamp
     */
    eProsima_user_DllExport uint64_t timeStamp() const;

    /*!
     * @brief This function returns a reference to member timeStamp
     * @return Reference to member timeStamp
     */
    eProsima_user_DllExport uint64_t& timeStamp();


    /*!
     * @brief This function sets a value in member timeStamp_d
     * @param _timeStamp_d New value for member timeStamp_d
     */
    eProsima_user_DllExport void timeStamp_d(
            int64_t _timeStamp_d);

    /*!
     * @brief This function returns the value of member timeStamp_d
     * @return Value of member timeStamp_d
     */
    eProsima_user_DllExport int64_t timeStamp_d() const;

    /*!
     * @brief This function returns a reference to member timeStamp_d
     * @return Reference to member timeStamp_d
     */
    eProsima_user_DllExport int64_t& timeStamp_d();


    /*!
     * @brief This function sets a value in member rxtx
     * @param _rxtx New value for member rxtx
     */
    eProsima_user_DllExport void rxtx(
            uint8_t _rxtx);

    /*!
     * @brief This function returns the value of member rxtx
     * @return Value of member rxtx
     */
    eProsima_user_DllExport uint8_t rxtx() const;

    /*!
     * @brief This function returns a reference to member rxtx
     * @return Reference to member rxtx
     */
    eProsima_user_DllExport uint8_t& rxtx();


    /*!
     * @brief This function sets a value in member errorCode
     * @param _errorCode New value for member errorCode
     */
    eProsima_user_DllExport void errorCode(
            uint8_t _errorCode);

    /*!
     * @brief This function returns the value of member errorCode
     * @return Value of member errorCode
     */
    eProsima_user_DllExport uint8_t errorCode() const;

    /*!
     * @brief This function returns a reference to member errorCode
     * @return Reference to member errorCode
     */
    eProsima_user_DllExport uint8_t& errorCode();


    /*!
     * @brief This function sets a value in member NMstate
     * @param _NMstate New value for member NMstate
     */
    eProsima_user_DllExport void NMstate(
            uint8_t _NMstate);

    /*!
     * @brief This function returns the value of member NMstate
     * @return Value of member NMstate
     */
    eProsima_user_DllExport uint8_t NMstate() const;

    /*!
     * @brief This function returns a reference to member NMstate
     * @return Reference to member NMstate
     */
    eProsima_user_DllExport uint8_t& NMstate();


    /*!
     * @brief This function sets a value in member isMasterFrame
     * @param _isMasterFrame New value for member isMasterFrame
     */
    eProsima_user_DllExport void isMasterFrame(
            uint8_t _isMasterFrame);

    /*!
     * @brief This function returns the value of member isMasterFrame
     * @return Value of member isMasterFrame
     */
    eProsima_user_DllExport uint8_t isMasterFrame() const;

    /*!
     * @brief This function returns a reference to member isMasterFrame
     * @return Reference to member isMasterFrame
     */
    eProsima_user_DllExport uint8_t& isMasterFrame();

private:

    uint32_t m_channel{0};
    uint32_t m_id{0};
    uint8_t m_dlc{0};
    std::vector<uint8_t> m_data;
    std::vector<uint8_t> m_dataParser;
    uint16_t m_flags{0};
    uint64_t m_timeStamp{0};
    int64_t m_timeStamp_d{0};
    uint8_t m_rxtx{0};
    uint8_t m_errorCode{0};
    uint8_t m_NMstate{0};
    uint8_t m_isMasterFrame{0};

};




/*!
 * @brief This class represents the structure linMessages defined by the user in the IDL file.
 * @ingroup ZoneMasterData
 */
class linMessages
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport linMessages();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~linMessages();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object linMessages that will be copied.
     */
    eProsima_user_DllExport linMessages(
            const linMessages& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object linMessages that will be copied.
     */
    eProsima_user_DllExport linMessages(
            linMessages&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object linMessages that will be copied.
     */
    eProsima_user_DllExport linMessages& operator =(
            const linMessages& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object linMessages that will be copied.
     */
    eProsima_user_DllExport linMessages& operator =(
            linMessages&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x linMessages object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const linMessages& x) const;

    /*!
     * @brief Comparison operator.
     * @param x linMessages object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const linMessages& x) const;

    /*!
     * @brief This function sets a value in member len
     * @param _len New value for member len
     */
    eProsima_user_DllExport void len(
            uint64_t _len);

    /*!
     * @brief This function returns the value of member len
     * @return Value of member len
     */
    eProsima_user_DllExport uint64_t len() const;

    /*!
     * @brief This function returns a reference to member len
     * @return Reference to member len
     */
    eProsima_user_DllExport uint64_t& len();


    /*!
     * @brief This function copies the value in member linMsgs
     * @param _linMsgs New value to be copied in member linMsgs
     */
    eProsima_user_DllExport void linMsgs(
            const std::vector<linMessage>& _linMsgs);

    /*!
     * @brief This function moves the value in member linMsgs
     * @param _linMsgs New value to be moved in member linMsgs
     */
    eProsima_user_DllExport void linMsgs(
            std::vector<linMessage>&& _linMsgs);

    /*!
     * @brief This function returns a constant reference to member linMsgs
     * @return Constant reference to member linMsgs
     */
    eProsima_user_DllExport const std::vector<linMessage>& linMsgs() const;

    /*!
     * @brief This function returns a reference to member linMsgs
     * @return Reference to member linMsgs
     */
    eProsima_user_DllExport std::vector<linMessage>& linMsgs();

private:

    uint64_t m_len{0};
    std::vector<linMessage> m_linMsgs;

};


/*!
 * @brief This class represents the structure someipFrame defined by the user in the IDL file.
 * @ingroup ZoneMasterData
 */
class someipFrame
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport someipFrame();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~someipFrame();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object someipFrame that will be copied.
     */
    eProsima_user_DllExport someipFrame(
            const someipFrame& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object someipFrame that will be copied.
     */
    eProsima_user_DllExport someipFrame(
            someipFrame&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object someipFrame that will be copied.
     */
    eProsima_user_DllExport someipFrame& operator =(
            const someipFrame& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object someipFrame that will be copied.
     */
    eProsima_user_DllExport someipFrame& operator =(
            someipFrame&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x someipFrame object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const someipFrame& x) const;

    /*!
     * @brief Comparison operator.
     * @param x someipFrame object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const someipFrame& x) const;

    /*!
     * @brief This function copies the value in member proto
     * @param _proto New value to be copied in member proto
     */
    eProsima_user_DllExport void proto(
            const std::string& _proto);

    /*!
     * @brief This function moves the value in member proto
     * @param _proto New value to be moved in member proto
     */
    eProsima_user_DllExport void proto(
            std::string&& _proto);

    /*!
     * @brief This function returns a constant reference to member proto
     * @return Constant reference to member proto
     */
    eProsima_user_DllExport const std::string& proto() const;

    /*!
     * @brief This function returns a reference to member proto
     * @return Reference to member proto
     */
    eProsima_user_DllExport std::string& proto();


    /*!
     * @brief This function sets a value in member timeStamp
     * @param _timeStamp New value for member timeStamp
     */
    eProsima_user_DllExport void timeStamp(
            uint64_t _timeStamp);

    /*!
     * @brief This function returns the value of member timeStamp
     * @return Value of member timeStamp
     */
    eProsima_user_DllExport uint64_t timeStamp() const;

    /*!
     * @brief This function returns a reference to member timeStamp
     * @return Reference to member timeStamp
     */
    eProsima_user_DllExport uint64_t& timeStamp();


    /*!
     * @brief This function copies the value in member src_ip
     * @param _src_ip New value to be copied in member src_ip
     */
    eProsima_user_DllExport void src_ip(
            const std::string& _src_ip);

    /*!
     * @brief This function moves the value in member src_ip
     * @param _src_ip New value to be moved in member src_ip
     */
    eProsima_user_DllExport void src_ip(
            std::string&& _src_ip);

    /*!
     * @brief This function returns a constant reference to member src_ip
     * @return Constant reference to member src_ip
     */
    eProsima_user_DllExport const std::string& src_ip() const;

    /*!
     * @brief This function returns a reference to member src_ip
     * @return Reference to member src_ip
     */
    eProsima_user_DllExport std::string& src_ip();


    /*!
     * @brief This function sets a value in member src_port
     * @param _src_port New value for member src_port
     */
    eProsima_user_DllExport void src_port(
            uint32_t _src_port);

    /*!
     * @brief This function returns the value of member src_port
     * @return Value of member src_port
     */
    eProsima_user_DllExport uint32_t src_port() const;

    /*!
     * @brief This function returns a reference to member src_port
     * @return Reference to member src_port
     */
    eProsima_user_DllExport uint32_t& src_port();


    /*!
     * @brief This function copies the value in member dest_ip
     * @param _dest_ip New value to be copied in member dest_ip
     */
    eProsima_user_DllExport void dest_ip(
            const std::string& _dest_ip);

    /*!
     * @brief This function moves the value in member dest_ip
     * @param _dest_ip New value to be moved in member dest_ip
     */
    eProsima_user_DllExport void dest_ip(
            std::string&& _dest_ip);

    /*!
     * @brief This function returns a constant reference to member dest_ip
     * @return Constant reference to member dest_ip
     */
    eProsima_user_DllExport const std::string& dest_ip() const;

    /*!
     * @brief This function returns a reference to member dest_ip
     * @return Reference to member dest_ip
     */
    eProsima_user_DllExport std::string& dest_ip();


    /*!
     * @brief This function sets a value in member dest_port
     * @param _dest_port New value for member dest_port
     */
    eProsima_user_DllExport void dest_port(
            uint32_t _dest_port);

    /*!
     * @brief This function returns the value of member dest_port
     * @return Value of member dest_port
     */
    eProsima_user_DllExport uint32_t dest_port() const;

    /*!
     * @brief This function returns a reference to member dest_port
     * @return Reference to member dest_port
     */
    eProsima_user_DllExport uint32_t& dest_port();


    /*!
     * @brief This function copies the value in member if_type
     * @param _if_type New value to be copied in member if_type
     */
    eProsima_user_DllExport void if_type(
            const std::string& _if_type);

    /*!
     * @brief This function moves the value in member if_type
     * @param _if_type New value to be moved in member if_type
     */
    eProsima_user_DllExport void if_type(
            std::string&& _if_type);

    /*!
     * @brief This function returns a constant reference to member if_type
     * @return Constant reference to member if_type
     */
    eProsima_user_DllExport const std::string& if_type() const;

    /*!
     * @brief This function returns a reference to member if_type
     * @return Reference to member if_type
     */
    eProsima_user_DllExport std::string& if_type();


    /*!
     * @brief This function sets a value in member srv_id
     * @param _srv_id New value for member srv_id
     */
    eProsima_user_DllExport void srv_id(
            uint32_t _srv_id);

    /*!
     * @brief This function returns the value of member srv_id
     * @return Value of member srv_id
     */
    eProsima_user_DllExport uint32_t srv_id() const;

    /*!
     * @brief This function returns a reference to member srv_id
     * @return Reference to member srv_id
     */
    eProsima_user_DllExport uint32_t& srv_id();


    /*!
     * @brief This function copies the value in member srv_name
     * @param _srv_name New value to be copied in member srv_name
     */
    eProsima_user_DllExport void srv_name(
            const std::string& _srv_name);

    /*!
     * @brief This function moves the value in member srv_name
     * @param _srv_name New value to be moved in member srv_name
     */
    eProsima_user_DllExport void srv_name(
            std::string&& _srv_name);

    /*!
     * @brief This function returns a constant reference to member srv_name
     * @return Constant reference to member srv_name
     */
    eProsima_user_DllExport const std::string& srv_name() const;

    /*!
     * @brief This function returns a reference to member srv_name
     * @return Reference to member srv_name
     */
    eProsima_user_DllExport std::string& srv_name();


    /*!
     * @brief This function sets a value in member inst_id
     * @param _inst_id New value for member inst_id
     */
    eProsima_user_DllExport void inst_id(
            uint32_t _inst_id);

    /*!
     * @brief This function returns the value of member inst_id
     * @return Value of member inst_id
     */
    eProsima_user_DllExport uint32_t inst_id() const;

    /*!
     * @brief This function returns a reference to member inst_id
     * @return Reference to member inst_id
     */
    eProsima_user_DllExport uint32_t& inst_id();


    /*!
     * @brief This function sets a value in member if_id
     * @param _if_id New value for member if_id
     */
    eProsima_user_DllExport void if_id(
            uint32_t _if_id);

    /*!
     * @brief This function returns the value of member if_id
     * @return Value of member if_id
     */
    eProsima_user_DllExport uint32_t if_id() const;

    /*!
     * @brief This function returns a reference to member if_id
     * @return Reference to member if_id
     */
    eProsima_user_DllExport uint32_t& if_id();


    /*!
     * @brief This function copies the value in member if_name
     * @param _if_name New value to be copied in member if_name
     */
    eProsima_user_DllExport void if_name(
            const std::string& _if_name);

    /*!
     * @brief This function moves the value in member if_name
     * @param _if_name New value to be moved in member if_name
     */
    eProsima_user_DllExport void if_name(
            std::string&& _if_name);

    /*!
     * @brief This function returns a constant reference to member if_name
     * @return Constant reference to member if_name
     */
    eProsima_user_DllExport const std::string& if_name() const;

    /*!
     * @brief This function returns a reference to member if_name
     * @return Reference to member if_name
     */
    eProsima_user_DllExport std::string& if_name();


    /*!
     * @brief This function sets a value in member msg_type
     * @param _msg_type New value for member msg_type
     */
    eProsima_user_DllExport void msg_type(
            uint16_t _msg_type);

    /*!
     * @brief This function returns the value of member msg_type
     * @return Value of member msg_type
     */
    eProsima_user_DllExport uint16_t msg_type() const;

    /*!
     * @brief This function returns a reference to member msg_type
     * @return Reference to member msg_type
     */
    eProsima_user_DllExport uint16_t& msg_type();


    /*!
     * @brief This function sets a value in member session_id
     * @param _session_id New value for member session_id
     */
    eProsima_user_DllExport void session_id(
            uint32_t _session_id);

    /*!
     * @brief This function returns the value of member session_id
     * @return Value of member session_id
     */
    eProsima_user_DllExport uint32_t session_id() const;

    /*!
     * @brief This function returns a reference to member session_id
     * @return Reference to member session_id
     */
    eProsima_user_DllExport uint32_t& session_id();


    /*!
     * @brief This function copies the value in member payload
     * @param _payload New value to be copied in member payload
     */
    eProsima_user_DllExport void payload(
            const std::vector<uint8_t>& _payload);

    /*!
     * @brief This function moves the value in member payload
     * @param _payload New value to be moved in member payload
     */
    eProsima_user_DllExport void payload(
            std::vector<uint8_t>&& _payload);

    /*!
     * @brief This function returns a constant reference to member payload
     * @return Constant reference to member payload
     */
    eProsima_user_DllExport const std::vector<uint8_t>& payload() const;

    /*!
     * @brief This function returns a reference to member payload
     * @return Reference to member payload
     */
    eProsima_user_DllExport std::vector<uint8_t>& payload();


    /*!
     * @brief This function copies the value in member context_dict
     * @param _context_dict New value to be copied in member context_dict
     */
    eProsima_user_DllExport void context_dict(
            const std::string& _context_dict);

    /*!
     * @brief This function moves the value in member context_dict
     * @param _context_dict New value to be moved in member context_dict
     */
    eProsima_user_DllExport void context_dict(
            std::string&& _context_dict);

    /*!
     * @brief This function returns a constant reference to member context_dict
     * @return Constant reference to member context_dict
     */
    eProsima_user_DllExport const std::string& context_dict() const;

    /*!
     * @brief This function returns a reference to member context_dict
     * @return Reference to member context_dict
     */
    eProsima_user_DllExport std::string& context_dict();


    /*!
     * @brief This function copies the value in member dir
     * @param _dir New value to be copied in member dir
     */
    eProsima_user_DllExport void dir(
            const std::string& _dir);

    /*!
     * @brief This function moves the value in member dir
     * @param _dir New value to be moved in member dir
     */
    eProsima_user_DllExport void dir(
            std::string&& _dir);

    /*!
     * @brief This function returns a constant reference to member dir
     * @return Constant reference to member dir
     */
    eProsima_user_DllExport const std::string& dir() const;

    /*!
     * @brief This function returns a reference to member dir
     * @return Reference to member dir
     */
    eProsima_user_DllExport std::string& dir();


    /*!
     * @brief This function copies the value in member children
     * @param _children New value to be copied in member children
     */
    eProsima_user_DllExport void children(
            const std::string& _children);

    /*!
     * @brief This function moves the value in member children
     * @param _children New value to be moved in member children
     */
    eProsima_user_DllExport void children(
            std::string&& _children);

    /*!
     * @brief This function returns a constant reference to member children
     * @return Constant reference to member children
     */
    eProsima_user_DllExport const std::string& children() const;

    /*!
     * @brief This function returns a reference to member children
     * @return Reference to member children
     */
    eProsima_user_DllExport std::string& children();


    /*!
     * @brief This function sets a value in member ret_code
     * @param _ret_code New value for member ret_code
     */
    eProsima_user_DllExport void ret_code(
            uint16_t _ret_code);

    /*!
     * @brief This function returns the value of member ret_code
     * @return Value of member ret_code
     */
    eProsima_user_DllExport uint16_t ret_code() const;

    /*!
     * @brief This function returns a reference to member ret_code
     * @return Reference to member ret_code
     */
    eProsima_user_DllExport uint16_t& ret_code();


    /*!
     * @brief This function sets a value in member channel
     * @param _channel New value for member channel
     */
    eProsima_user_DllExport void channel(
            uint32_t _channel);

    /*!
     * @brief This function returns the value of member channel
     * @return Value of member channel
     */
    eProsima_user_DllExport uint32_t channel() const;

    /*!
     * @brief This function returns a reference to member channel
     * @return Reference to member channel
     */
    eProsima_user_DllExport uint32_t& channel();


    /*!
     * @brief This function sets a value in member delta_time
     * @param _delta_time New value for member delta_time
     */
    eProsima_user_DllExport void delta_time(
            uint64_t _delta_time);

    /*!
     * @brief This function returns the value of member delta_time
     * @return Value of member delta_time
     */
    eProsima_user_DllExport uint64_t delta_time() const;

    /*!
     * @brief This function returns a reference to member delta_time
     * @return Reference to member delta_time
     */
    eProsima_user_DllExport uint64_t& delta_time();

private:

    std::string m_proto;
    uint64_t m_timeStamp{0};
    std::string m_src_ip;
    uint32_t m_src_port{0};
    std::string m_dest_ip;
    uint32_t m_dest_port{0};
    std::string m_if_type;
    uint32_t m_srv_id{0};
    std::string m_srv_name;
    uint32_t m_inst_id{0};
    uint32_t m_if_id{0};
    std::string m_if_name;
    uint16_t m_msg_type{0};
    uint32_t m_session_id{0};
    std::vector<uint8_t> m_payload;
    std::string m_context_dict;
    std::string m_dir;
    std::string m_children;
    uint16_t m_ret_code{0};
    uint32_t m_channel{0};
    uint64_t m_delta_time{0};

};


/*!
 * @brief This class represents the structure sdFrame defined by the user in the IDL file.
 * @ingroup ZoneMasterData
 */
class sdFrame
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport sdFrame();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~sdFrame();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object sdFrame that will be copied.
     */
    eProsima_user_DllExport sdFrame(
            const sdFrame& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object sdFrame that will be copied.
     */
    eProsima_user_DllExport sdFrame(
            sdFrame&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object sdFrame that will be copied.
     */
    eProsima_user_DllExport sdFrame& operator =(
            const sdFrame& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object sdFrame that will be copied.
     */
    eProsima_user_DllExport sdFrame& operator =(
            sdFrame&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x sdFrame object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const sdFrame& x) const;

    /*!
     * @brief Comparison operator.
     * @param x sdFrame object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const sdFrame& x) const;

    /*!
     * @brief This function copies the value in member proto
     * @param _proto New value to be copied in member proto
     */
    eProsima_user_DllExport void proto(
            const std::string& _proto);

    /*!
     * @brief This function moves the value in member proto
     * @param _proto New value to be moved in member proto
     */
    eProsima_user_DllExport void proto(
            std::string&& _proto);

    /*!
     * @brief This function returns a constant reference to member proto
     * @return Constant reference to member proto
     */
    eProsima_user_DllExport const std::string& proto() const;

    /*!
     * @brief This function returns a reference to member proto
     * @return Reference to member proto
     */
    eProsima_user_DllExport std::string& proto();


    /*!
     * @brief This function sets a value in member timeStamp
     * @param _timeStamp New value for member timeStamp
     */
    eProsima_user_DllExport void timeStamp(
            uint64_t _timeStamp);

    /*!
     * @brief This function returns the value of member timeStamp
     * @return Value of member timeStamp
     */
    eProsima_user_DllExport uint64_t timeStamp() const;

    /*!
     * @brief This function returns a reference to member timeStamp
     * @return Reference to member timeStamp
     */
    eProsima_user_DllExport uint64_t& timeStamp();


    /*!
     * @brief This function copies the value in member src_ip
     * @param _src_ip New value to be copied in member src_ip
     */
    eProsima_user_DllExport void src_ip(
            const std::string& _src_ip);

    /*!
     * @brief This function moves the value in member src_ip
     * @param _src_ip New value to be moved in member src_ip
     */
    eProsima_user_DllExport void src_ip(
            std::string&& _src_ip);

    /*!
     * @brief This function returns a constant reference to member src_ip
     * @return Constant reference to member src_ip
     */
    eProsima_user_DllExport const std::string& src_ip() const;

    /*!
     * @brief This function returns a reference to member src_ip
     * @return Reference to member src_ip
     */
    eProsima_user_DllExport std::string& src_ip();


    /*!
     * @brief This function sets a value in member src_port
     * @param _src_port New value for member src_port
     */
    eProsima_user_DllExport void src_port(
            uint32_t _src_port);

    /*!
     * @brief This function returns the value of member src_port
     * @return Value of member src_port
     */
    eProsima_user_DllExport uint32_t src_port() const;

    /*!
     * @brief This function returns a reference to member src_port
     * @return Reference to member src_port
     */
    eProsima_user_DllExport uint32_t& src_port();


    /*!
     * @brief This function copies the value in member dest_ip
     * @param _dest_ip New value to be copied in member dest_ip
     */
    eProsima_user_DllExport void dest_ip(
            const std::string& _dest_ip);

    /*!
     * @brief This function moves the value in member dest_ip
     * @param _dest_ip New value to be moved in member dest_ip
     */
    eProsima_user_DllExport void dest_ip(
            std::string&& _dest_ip);

    /*!
     * @brief This function returns a constant reference to member dest_ip
     * @return Constant reference to member dest_ip
     */
    eProsima_user_DllExport const std::string& dest_ip() const;

    /*!
     * @brief This function returns a reference to member dest_ip
     * @return Reference to member dest_ip
     */
    eProsima_user_DllExport std::string& dest_ip();


    /*!
     * @brief This function sets a value in member dest_port
     * @param _dest_port New value for member dest_port
     */
    eProsima_user_DllExport void dest_port(
            uint32_t _dest_port);

    /*!
     * @brief This function returns the value of member dest_port
     * @return Value of member dest_port
     */
    eProsima_user_DllExport uint32_t dest_port() const;

    /*!
     * @brief This function returns a reference to member dest_port
     * @return Reference to member dest_port
     */
    eProsima_user_DllExport uint32_t& dest_port();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<uint8_t>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<uint8_t>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<uint8_t>& data();


    /*!
     * @brief This function copies the value in member children
     * @param _children New value to be copied in member children
     */
    eProsima_user_DllExport void children(
            const std::string& _children);

    /*!
     * @brief This function moves the value in member children
     * @param _children New value to be moved in member children
     */
    eProsima_user_DllExport void children(
            std::string&& _children);

    /*!
     * @brief This function returns a constant reference to member children
     * @return Constant reference to member children
     */
    eProsima_user_DllExport const std::string& children() const;

    /*!
     * @brief This function returns a reference to member children
     * @return Reference to member children
     */
    eProsima_user_DllExport std::string& children();


    /*!
     * @brief This function copies the value in member dir
     * @param _dir New value to be copied in member dir
     */
    eProsima_user_DllExport void dir(
            const std::string& _dir);

    /*!
     * @brief This function moves the value in member dir
     * @param _dir New value to be moved in member dir
     */
    eProsima_user_DllExport void dir(
            std::string&& _dir);

    /*!
     * @brief This function returns a constant reference to member dir
     * @return Constant reference to member dir
     */
    eProsima_user_DllExport const std::string& dir() const;

    /*!
     * @brief This function returns a reference to member dir
     * @return Reference to member dir
     */
    eProsima_user_DllExport std::string& dir();


    /*!
     * @brief This function sets a value in member channel
     * @param _channel New value for member channel
     */
    eProsima_user_DllExport void channel(
            uint32_t _channel);

    /*!
     * @brief This function returns the value of member channel
     * @return Value of member channel
     */
    eProsima_user_DllExport uint32_t channel() const;

    /*!
     * @brief This function returns a reference to member channel
     * @return Reference to member channel
     */
    eProsima_user_DllExport uint32_t& channel();

private:

    std::string m_proto;
    uint64_t m_timeStamp{0};
    std::string m_src_ip;
    uint32_t m_src_port{0};
    std::string m_dest_ip;
    uint32_t m_dest_port{0};
    std::vector<uint8_t> m_data;
    std::string m_children;
    std::string m_dir;
    uint32_t m_channel{0};

};


/*!
 * @brief This class represents the structure someipStateInfo defined by the user in the IDL file.
 * @ingroup ZoneMasterData
 */
class someipStateInfo
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport someipStateInfo();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~someipStateInfo();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object someipStateInfo that will be copied.
     */
    eProsima_user_DllExport someipStateInfo(
            const someipStateInfo& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object someipStateInfo that will be copied.
     */
    eProsima_user_DllExport someipStateInfo(
            someipStateInfo&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object someipStateInfo that will be copied.
     */
    eProsima_user_DllExport someipStateInfo& operator =(
            const someipStateInfo& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object someipStateInfo that will be copied.
     */
    eProsima_user_DllExport someipStateInfo& operator =(
            someipStateInfo&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x someipStateInfo object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const someipStateInfo& x) const;

    /*!
     * @brief Comparison operator.
     * @param x someipStateInfo object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const someipStateInfo& x) const;

    /*!
     * @brief This function sets a value in member timeStamp
     * @param _timeStamp New value for member timeStamp
     */
    eProsima_user_DllExport void timeStamp(
            uint64_t _timeStamp);

    /*!
     * @brief This function returns the value of member timeStamp
     * @return Value of member timeStamp
     */
    eProsima_user_DllExport uint64_t timeStamp() const;

    /*!
     * @brief This function returns a reference to member timeStamp
     * @return Reference to member timeStamp
     */
    eProsima_user_DllExport uint64_t& timeStamp();


    /*!
     * @brief This function sets a value in member srv_id
     * @param _srv_id New value for member srv_id
     */
    eProsima_user_DllExport void srv_id(
            uint32_t _srv_id);

    /*!
     * @brief This function returns the value of member srv_id
     * @return Value of member srv_id
     */
    eProsima_user_DllExport uint32_t srv_id() const;

    /*!
     * @brief This function returns a reference to member srv_id
     * @return Reference to member srv_id
     */
    eProsima_user_DllExport uint32_t& srv_id();


    /*!
     * @brief This function sets a value in member inst_id
     * @param _inst_id New value for member inst_id
     */
    eProsima_user_DllExport void inst_id(
            uint32_t _inst_id);

    /*!
     * @brief This function returns the value of member inst_id
     * @return Value of member inst_id
     */
    eProsima_user_DllExport uint32_t inst_id() const;

    /*!
     * @brief This function returns a reference to member inst_id
     * @return Reference to member inst_id
     */
    eProsima_user_DllExport uint32_t& inst_id();


    /*!
     * @brief This function sets a value in member state
     * @param _state New value for member state
     */
    eProsima_user_DllExport void state(
            uint8_t _state);

    /*!
     * @brief This function returns the value of member state
     * @return Value of member state
     */
    eProsima_user_DllExport uint8_t state() const;

    /*!
     * @brief This function returns a reference to member state
     * @return Reference to member state
     */
    eProsima_user_DllExport uint8_t& state();


    /*!
     * @brief This function sets a value in member channel
     * @param _channel New value for member channel
     */
    eProsima_user_DllExport void channel(
            uint16_t _channel);

    /*!
     * @brief This function returns the value of member channel
     * @return Value of member channel
     */
    eProsima_user_DllExport uint16_t channel() const;

    /*!
     * @brief This function returns a reference to member channel
     * @return Reference to member channel
     */
    eProsima_user_DllExport uint16_t& channel();

private:

    uint64_t m_timeStamp{0};
    uint32_t m_srv_id{0};
    uint32_t m_inst_id{0};
    uint8_t m_state{0};
    uint16_t m_channel{0};

};

#endif // _FAST_DDS_GENERATED_ZONEMASTERDATA_H_



